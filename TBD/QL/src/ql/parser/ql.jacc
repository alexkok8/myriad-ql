%package ql.parser
%class Parser
%interface Tokens
%semantic ql.ast.ASTNode
%start form

%token ':' '"' TYPEBOOL TYPEINT TYPESTRING
%token <QLString> STRING
%token <QLInt> INT
%token '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')'

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

%type <Form> form
%type <Statements> statements
%type <Statement> statement
%type <Question> question
%type <Type> type




%{
import ql.ast.*;
import ql.ast.type.*;
import ql.ast.expression.*;
%}

%%

 form : statements { result = new Form($1); }
      ;

 statements : statement statements      {$$ = new Statements($1, $2);}
            | statement                 {$$ = new Statements($1);}
            ;


 statement : question                   {$$ = $1;}
           ;

 question : '"' STRING '"' STRING ':' type      {$$ = new Question($2, $4, $6);}
          ;

 type : TYPEBOOL        {$$ = TYPEBOOL;}
       | TYPEINT        {$$ = TYPEINT;}
       | TYPESTRING     {$$ = TYPESTRING;}
       ;

 expr	 : '+' expr	%prec UPLUS { $$ = new Pos($2); }
		 | '-' expr	%prec UMIN  { $$ = new Neg($2); }
		 | '!' expr %prec UNOT  { $$ = new Not($2); }
		 | expr '*' expr		{ $$ = new Mul($1, $3); }
		 | expr '/' expr 		{ $$ = new Div($1, $3); }
		 | expr '+' expr		{ $$ = new Add($1, $3); }
		 | expr '-' expr		{ $$ = new Sub($1, $3); }
		 | expr EQ expr		    { $$ = new Eq($1, $3); }
		 | expr NEQ expr		{ $$ = new NEq($1, $3); }
		 | expr '>' expr		{ $$ = new GT($1, $3); }
		 | expr '<' expr		{ $$ = new LT($1, $3); }
		 | expr GEQ expr		{ $$ = new GEq($1, $3); }
		 | expr LEQ expr		{ $$ = new LEq($1, $3); }
		 | expr AND expr	    { $$ = new And($1, $3); }
	     | expr OR expr  		{ $$ = new Or($1, $3); }
		 | INT					{ $$ = $1; }
		 | IDENT         		{ $$ = $1; }
		 | '(' expr ')'			{ $$ = $2; }
		 ;



%%
private Lexer lexer;

private Form result;

public Form getResult() {
  return result;
}

public Parser(Lexer lexer) {
  this.lexer = lexer;
}

private void yyerror(String msg) {
  System.err.println(msg);
}