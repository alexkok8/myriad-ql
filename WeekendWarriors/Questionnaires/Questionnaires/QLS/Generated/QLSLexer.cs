//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Boukr\Documents\myriad-ql\WeekendWarriors\Questionnaires\Questionnaires\\QLS\Grammar\QLS.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QLSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		Whitespace=10, MultiLineComment=11, SingleLineComment=12, HexDigit=13, 
		LiteralValue=14, Type=15, Identifier=16, Property=17, StringLiteral=18, 
		NumberLiteral=19, ColorLiteral=20;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"Whitespace", "MultiLineComment", "SingleLineComment", "HexDigit", "LiteralValue", 
		"Type", "Identifier", "Property", "StringLiteral", "NumberLiteral", "ColorLiteral"
	};


	public QLSLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'stylesheet'", "'{'", "'}'", "'page'", "'section'", "'widget'", 
		"'question'", "'default'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "Whitespace", 
		"MultiLineComment", "SingleLineComment", "HexDigit", "LiteralValue", "Type", 
		"Identifier", "Property", "StringLiteral", "NumberLiteral", "ColorLiteral"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QLS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QLSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x16");
		sb.Append("\xF9\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3");
		sb.Append("\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3");
		sb.Append("\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x6\v\x63");
		sb.Append("\n\v\r\v\xE\v\x64\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\a\fm\n\f\f\f");
		sb.Append("\xE\fp\v\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\a\r");
		sb.Append("{\n\r\f\r\xE\r~\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x5\xF\x9B\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10");
		sb.Append("\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10");
		sb.Append("\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xC3\n\x10");
		sb.Append("\x3\x11\x3\x11\a\x11\xC7\n\x11\f\x11\xE\x11\xCA\v\x11\x3\x12");
		sb.Append("\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3");
		sb.Append("\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12");
		sb.Append("\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xE2\n\x12\x3\x13\x3\x13");
		sb.Append("\a\x13\xE6\n\x13\f\x13\xE\x13\xE9\v\x13\x3\x13\x3\x13\x3\x14");
		sb.Append("\x6\x14\xEE\n\x14\r\x14\xE\x14\xEF\x3\x15\x3\x15\x3\x15\x3\x15");
		sb.Append("\x3\x15\x3\x15\x3\x15\x3\x15\x3n\x2\x16\x3\x3\x5\x4\a\x5\t\x6");
		sb.Append("\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10");
		sb.Append("\x1F\x11!\x12#\x13%\x14\'\x15)\x16\x3\x2\a\x5\x2\v\f\xE\xF\"");
		sb.Append("\"\x4\x2\f\f\xF\xF\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\");
		sb.Append("\x61\x61\x63|\x3\x2$$\x109\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2");
		sb.Append("\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r");
		sb.Append("\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3");
		sb.Append("\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2");
		sb.Append("\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2");
		sb.Append("\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3");
		sb.Append("\x2\x2\x2\x2)\x3\x2\x2\x2\x3+\x3\x2\x2\x2\x5\x36\x3\x2\x2\x2");
		sb.Append("\a\x38\x3\x2\x2\x2\t:\x3\x2\x2\x2\v?\x3\x2\x2\x2\rG\x3\x2\x2");
		sb.Append("\x2\xFN\x3\x2\x2\x2\x11W\x3\x2\x2\x2\x13_\x3\x2\x2\x2\x15\x62");
		sb.Append("\x3\x2\x2\x2\x17h\x3\x2\x2\x2\x19v\x3\x2\x2\x2\x1B\x81\x3\x2");
		sb.Append("\x2\x2\x1D\x9A\x3\x2\x2\x2\x1F\xC2\x3\x2\x2\x2!\xC4\x3\x2\x2");
		sb.Append("\x2#\xE1\x3\x2\x2\x2%\xE3\x3\x2\x2\x2\'\xED\x3\x2\x2\x2)\xF1");
		sb.Append("\x3\x2\x2\x2+,\au\x2\x2,-\av\x2\x2-.\a{\x2\x2./\an\x2\x2/\x30");
		sb.Append("\ag\x2\x2\x30\x31\au\x2\x2\x31\x32\aj\x2\x2\x32\x33\ag\x2\x2");
		sb.Append("\x33\x34\ag\x2\x2\x34\x35\av\x2\x2\x35\x4\x3\x2\x2\x2\x36\x37");
		sb.Append("\a}\x2\x2\x37\x6\x3\x2\x2\x2\x38\x39\a\x7F\x2\x2\x39\b\x3\x2");
		sb.Append("\x2\x2:;\ar\x2\x2;<\a\x63\x2\x2<=\ai\x2\x2=>\ag\x2\x2>\n\x3");
		sb.Append("\x2\x2\x2?@\au\x2\x2@\x41\ag\x2\x2\x41\x42\a\x65\x2\x2\x42\x43");
		sb.Append("\av\x2\x2\x43\x44\ak\x2\x2\x44\x45\aq\x2\x2\x45\x46\ap\x2\x2");
		sb.Append("\x46\f\x3\x2\x2\x2GH\ay\x2\x2HI\ak\x2\x2IJ\a\x66\x2\x2JK\ai");
		sb.Append("\x2\x2KL\ag\x2\x2LM\av\x2\x2M\xE\x3\x2\x2\x2NO\as\x2\x2OP\a");
		sb.Append("w\x2\x2PQ\ag\x2\x2QR\au\x2\x2RS\av\x2\x2ST\ak\x2\x2TU\aq\x2");
		sb.Append("\x2UV\ap\x2\x2V\x10\x3\x2\x2\x2WX\a\x66\x2\x2XY\ag\x2\x2YZ\a");
		sb.Append("h\x2\x2Z[\a\x63\x2\x2[\\\aw\x2\x2\\]\an\x2\x2]^\av\x2\x2^\x12");
		sb.Append("\x3\x2\x2\x2_`\a<\x2\x2`\x14\x3\x2\x2\x2\x61\x63\t\x2\x2\x2");
		sb.Append("\x62\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2");
		sb.Append("\x64\x65\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66g\b\v\x2\x2g\x16");
		sb.Append("\x3\x2\x2\x2hi\a\x31\x2\x2ij\a,\x2\x2jn\x3\x2\x2\x2km\v\x2\x2");
		sb.Append("\x2lk\x3\x2\x2\x2mp\x3\x2\x2\x2no\x3\x2\x2\x2nl\x3\x2\x2\x2");
		sb.Append("oq\x3\x2\x2\x2pn\x3\x2\x2\x2qr\a,\x2\x2rs\a\x31\x2\x2st\x3\x2");
		sb.Append("\x2\x2tu\b\f\x2\x2u\x18\x3\x2\x2\x2vw\a\x31\x2\x2wx\a\x31\x2");
		sb.Append("\x2x|\x3\x2\x2\x2y{\n\x3\x2\x2zy\x3\x2\x2\x2{~\x3\x2\x2\x2|");
		sb.Append("z\x3\x2\x2\x2|}\x3\x2\x2\x2}\x7F\x3\x2\x2\x2~|\x3\x2\x2\x2\x7F");
		sb.Append("\x80\b\r\x2\x2\x80\x1A\x3\x2\x2\x2\x81\x82\x4\x32;\x2\x82\x83");
		sb.Append("\x4\x63h\x2\x83\x84\x4\x43H\x2\x84\x1C\x3\x2\x2\x2\x85\x86\a");
		sb.Append("o\x2\x2\x86\x87\aq\x2\x2\x87\x88\ap\x2\x2\x88\x89\ag\x2\x2\x89");
		sb.Append("\x9B\a{\x2\x2\x8A\x8B\a\x64\x2\x2\x8B\x8C\aq\x2\x2\x8C\x8D\a");
		sb.Append("q\x2\x2\x8D\x8E\an\x2\x2\x8E\x8F\ag\x2\x2\x8F\x90\a\x63\x2\x2");
		sb.Append("\x90\x9B\ap\x2\x2\x91\x92\au\x2\x2\x92\x93\av\x2\x2\x93\x94");
		sb.Append("\at\x2\x2\x94\x95\ak\x2\x2\x95\x96\ap\x2\x2\x96\x9B\ai\x2\x2");
		sb.Append("\x97\x98\ak\x2\x2\x98\x99\ap\x2\x2\x99\x9B\av\x2\x2\x9A\x85");
		sb.Append("\x3\x2\x2\x2\x9A\x8A\x3\x2\x2\x2\x9A\x91\x3\x2\x2\x2\x9A\x97");
		sb.Append("\x3\x2\x2\x2\x9B\x1E\x3\x2\x2\x2\x9C\x9D\au\x2\x2\x9D\x9E\a");
		sb.Append("r\x2\x2\x9E\x9F\ak\x2\x2\x9F\xA0\ap\x2\x2\xA0\xA1\a\x64\x2\x2");
		sb.Append("\xA1\xA2\aq\x2\x2\xA2\xC3\az\x2\x2\xA3\xA4\au\x2\x2\xA4\xA5");
		sb.Append("\an\x2\x2\xA5\xA6\ak\x2\x2\xA6\xA7\a\x66\x2\x2\xA7\xA8\ag\x2");
		sb.Append("\x2\xA8\xC3\at\x2\x2\xA9\xAA\av\x2\x2\xAA\xAB\ag\x2\x2\xAB\xAC");
		sb.Append("\az\x2\x2\xAC\xC3\av\x2\x2\xAD\xAE\at\x2\x2\xAE\xAF\a\x63\x2");
		sb.Append("\x2\xAF\xB0\a\x66\x2\x2\xB0\xB1\ak\x2\x2\xB1\xC3\aq\x2\x2\xB2");
		sb.Append("\xB3\a\x65\x2\x2\xB3\xB4\aj\x2\x2\xB4\xB5\ag\x2\x2\xB5\xB6\a");
		sb.Append("\x65\x2\x2\xB6\xB7\am\x2\x2\xB7\xB8\a\x64\x2\x2\xB8\xB9\aq\x2");
		sb.Append("\x2\xB9\xC3\az\x2\x2\xBA\xBB\a\x66\x2\x2\xBB\xBC\at\x2\x2\xBC");
		sb.Append("\xBD\aq\x2\x2\xBD\xBE\ar\x2\x2\xBE\xBF\a\x66\x2\x2\xBF\xC0\a");
		sb.Append("q\x2\x2\xC0\xC1\ay\x2\x2\xC1\xC3\ap\x2\x2\xC2\x9C\x3\x2\x2\x2");
		sb.Append("\xC2\xA3\x3\x2\x2\x2\xC2\xA9\x3\x2\x2\x2\xC2\xAD\x3\x2\x2\x2");
		sb.Append("\xC2\xB2\x3\x2\x2\x2\xC2\xBA\x3\x2\x2\x2\xC3 \x3\x2\x2\x2\xC4");
		sb.Append("\xC8\t\x4\x2\x2\xC5\xC7\t\x5\x2\x2\xC6\xC5\x3\x2\x2\x2\xC7\xCA");
		sb.Append("\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\"\x3");
		sb.Append("\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCC\ay\x2\x2\xCC\xCD\ak\x2");
		sb.Append("\x2\xCD\xCE\a\x66\x2\x2\xCE\xCF\av\x2\x2\xCF\xE2\aj\x2\x2\xD0");
		sb.Append("\xD1\ah\x2\x2\xD1\xD2\aq\x2\x2\xD2\xD3\ap\x2\x2\xD3\xE2\av\x2");
		sb.Append("\x2\xD4\xD5\ah\x2\x2\xD5\xD6\aq\x2\x2\xD6\xD7\ap\x2\x2\xD7\xD8");
		sb.Append("\av\x2\x2\xD8\xD9\au\x2\x2\xD9\xDA\ak\x2\x2\xDA\xDB\a|\x2\x2");
		sb.Append("\xDB\xE2\ag\x2\x2\xDC\xDD\a\x65\x2\x2\xDD\xDE\aq\x2\x2\xDE\xDF");
		sb.Append("\an\x2\x2\xDF\xE0\aq\x2\x2\xE0\xE2\at\x2\x2\xE1\xCB\x3\x2\x2");
		sb.Append("\x2\xE1\xD0\x3\x2\x2\x2\xE1\xD4\x3\x2\x2\x2\xE1\xDC\x3\x2\x2");
		sb.Append("\x2\xE2$\x3\x2\x2\x2\xE3\xE7\a$\x2\x2\xE4\xE6\n\x6\x2\x2\xE5");
		sb.Append("\xE4\x3\x2\x2\x2\xE6\xE9\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7");
		sb.Append("\xE8\x3\x2\x2\x2\xE8\xEA\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xEA");
		sb.Append("\xEB\a$\x2\x2\xEB&\x3\x2\x2\x2\xEC\xEE\x4\x32;\x2\xED\xEC\x3");
		sb.Append("\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xF0\x3");
		sb.Append("\x2\x2\x2\xF0(\x3\x2\x2\x2\xF1\xF2\a%\x2\x2\xF2\xF3\x5\x1B\xE");
		sb.Append("\x2\xF3\xF4\x5\x1B\xE\x2\xF4\xF5\x5\x1B\xE\x2\xF5\xF6\x5\x1B");
		sb.Append("\xE\x2\xF6\xF7\x5\x1B\xE\x2\xF7\xF8\x5\x1B\xE\x2\xF8*\x3\x2");
		sb.Append("\x2\x2\f\x2\x64n|\x9A\xC2\xC8\xE1\xE7\xEF\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
