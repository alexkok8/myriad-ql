//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Boukr\Documents\myriad-ql\WeekendWarriors\Questionnaires\Questionnaires\\QLS\Grammar\QLS.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QLSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		Whitespace=10, MultiLineComment=11, SingleLineComment=12, LiteralValue=13, 
		Type=14, Identifier=15, Property=16;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"Whitespace", "MultiLineComment", "SingleLineComment", "LiteralValue", 
		"Type", "Identifier", "Property"
	};


	public QLSLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'stylesheet'", "'{'", "'}'", "'page'", "'section'", "'widget'", 
		"'question'", "'default'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "Whitespace", 
		"MultiLineComment", "SingleLineComment", "LiteralValue", "Type", "Identifier", 
		"Property"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QLS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QLSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x12");
		sb.Append("\xD7\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b");
		sb.Append("\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v");
		sb.Append("\x6\v[\n\v\r\v\xE\v\\\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\a\f\x65");
		sb.Append("\n\f\f\f\xE\fh\v\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3");
		sb.Append("\r\a\rs\n\r\f\r\xE\rv\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x8F\n\xE\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xB7\n\xF");
		sb.Append("\x3\x10\x3\x10\a\x10\xBB\n\x10\f\x10\xE\x10\xBE\v\x10\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3");
		sb.Append("\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xD6\n\x11\x3\x66\x2\x12");
		sb.Append("\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r");
		sb.Append("\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12\x3\x2\x6\x5\x2\v\f\xE\xF");
		sb.Append("\"\"\x4\x2\f\f\xF\xF\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43");
		sb.Append("\\\x61\x61\x63|\xE5\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a");
		sb.Append("\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2");
		sb.Append("\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2");
		sb.Append("\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2");
		sb.Append("\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3");
		sb.Append("\x2\x2\x2\x3#\x3\x2\x2\x2\x5.\x3\x2\x2\x2\a\x30\x3\x2\x2\x2");
		sb.Append("\t\x32\x3\x2\x2\x2\v\x37\x3\x2\x2\x2\r?\x3\x2\x2\x2\xF\x46\x3");
		sb.Append("\x2\x2\x2\x11O\x3\x2\x2\x2\x13W\x3\x2\x2\x2\x15Z\x3\x2\x2\x2");
		sb.Append("\x17`\x3\x2\x2\x2\x19n\x3\x2\x2\x2\x1B\x8E\x3\x2\x2\x2\x1D\xB6");
		sb.Append("\x3\x2\x2\x2\x1F\xB8\x3\x2\x2\x2!\xD5\x3\x2\x2\x2#$\au\x2\x2");
		sb.Append("$%\av\x2\x2%&\a{\x2\x2&\'\an\x2\x2\'(\ag\x2\x2()\au\x2\x2)*");
		sb.Append("\aj\x2\x2*+\ag\x2\x2+,\ag\x2\x2,-\av\x2\x2-\x4\x3\x2\x2\x2.");
		sb.Append("/\a}\x2\x2/\x6\x3\x2\x2\x2\x30\x31\a\x7F\x2\x2\x31\b\x3\x2\x2");
		sb.Append("\x2\x32\x33\ar\x2\x2\x33\x34\a\x63\x2\x2\x34\x35\ai\x2\x2\x35");
		sb.Append("\x36\ag\x2\x2\x36\n\x3\x2\x2\x2\x37\x38\au\x2\x2\x38\x39\ag");
		sb.Append("\x2\x2\x39:\a\x65\x2\x2:;\av\x2\x2;<\ak\x2\x2<=\aq\x2\x2=>\a");
		sb.Append("p\x2\x2>\f\x3\x2\x2\x2?@\ay\x2\x2@\x41\ak\x2\x2\x41\x42\a\x66");
		sb.Append("\x2\x2\x42\x43\ai\x2\x2\x43\x44\ag\x2\x2\x44\x45\av\x2\x2\x45");
		sb.Append("\xE\x3\x2\x2\x2\x46G\as\x2\x2GH\aw\x2\x2HI\ag\x2\x2IJ\au\x2");
		sb.Append("\x2JK\av\x2\x2KL\ak\x2\x2LM\aq\x2\x2MN\ap\x2\x2N\x10\x3\x2\x2");
		sb.Append("\x2OP\a\x66\x2\x2PQ\ag\x2\x2QR\ah\x2\x2RS\a\x63\x2\x2ST\aw\x2");
		sb.Append("\x2TU\an\x2\x2UV\av\x2\x2V\x12\x3\x2\x2\x2WX\a<\x2\x2X\x14\x3");
		sb.Append("\x2\x2\x2Y[\t\x2\x2\x2ZY\x3\x2\x2\x2[\\\x3\x2\x2\x2\\Z\x3\x2");
		sb.Append("\x2\x2\\]\x3\x2\x2\x2]^\x3\x2\x2\x2^_\b\v\x2\x2_\x16\x3\x2\x2");
		sb.Append("\x2`\x61\a\x31\x2\x2\x61\x62\a,\x2\x2\x62\x66\x3\x2\x2\x2\x63");
		sb.Append("\x65\v\x2\x2\x2\x64\x63\x3\x2\x2\x2\x65h\x3\x2\x2\x2\x66g\x3");
		sb.Append("\x2\x2\x2\x66\x64\x3\x2\x2\x2gi\x3\x2\x2\x2h\x66\x3\x2\x2\x2");
		sb.Append("ij\a,\x2\x2jk\a\x31\x2\x2kl\x3\x2\x2\x2lm\b\f\x2\x2m\x18\x3");
		sb.Append("\x2\x2\x2no\a\x31\x2\x2op\a\x31\x2\x2pt\x3\x2\x2\x2qs\n\x3\x2");
		sb.Append("\x2rq\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2");
		sb.Append("uw\x3\x2\x2\x2vt\x3\x2\x2\x2wx\b\r\x2\x2x\x1A\x3\x2\x2\x2yz");
		sb.Append("\ao\x2\x2z{\aq\x2\x2{|\ap\x2\x2|}\ag\x2\x2}\x8F\a{\x2\x2~\x7F");
		sb.Append("\a\x64\x2\x2\x7F\x80\aq\x2\x2\x80\x81\aq\x2\x2\x81\x82\an\x2");
		sb.Append("\x2\x82\x83\ag\x2\x2\x83\x84\a\x63\x2\x2\x84\x8F\ap\x2\x2\x85");
		sb.Append("\x86\au\x2\x2\x86\x87\av\x2\x2\x87\x88\at\x2\x2\x88\x89\ak\x2");
		sb.Append("\x2\x89\x8A\ap\x2\x2\x8A\x8F\ai\x2\x2\x8B\x8C\ak\x2\x2\x8C\x8D");
		sb.Append("\ap\x2\x2\x8D\x8F\av\x2\x2\x8Ey\x3\x2\x2\x2\x8E~\x3\x2\x2\x2");
		sb.Append("\x8E\x85\x3\x2\x2\x2\x8E\x8B\x3\x2\x2\x2\x8F\x1C\x3\x2\x2\x2");
		sb.Append("\x90\x91\au\x2\x2\x91\x92\ar\x2\x2\x92\x93\ak\x2\x2\x93\x94");
		sb.Append("\ap\x2\x2\x94\x95\a\x64\x2\x2\x95\x96\aq\x2\x2\x96\xB7\az\x2");
		sb.Append("\x2\x97\x98\au\x2\x2\x98\x99\an\x2\x2\x99\x9A\ak\x2\x2\x9A\x9B");
		sb.Append("\a\x66\x2\x2\x9B\x9C\ag\x2\x2\x9C\xB7\at\x2\x2\x9D\x9E\av\x2");
		sb.Append("\x2\x9E\x9F\ag\x2\x2\x9F\xA0\az\x2\x2\xA0\xB7\av\x2\x2\xA1\xA2");
		sb.Append("\at\x2\x2\xA2\xA3\a\x63\x2\x2\xA3\xA4\a\x66\x2\x2\xA4\xA5\a");
		sb.Append("k\x2\x2\xA5\xB7\aq\x2\x2\xA6\xA7\a\x65\x2\x2\xA7\xA8\aj\x2\x2");
		sb.Append("\xA8\xA9\ag\x2\x2\xA9\xAA\a\x65\x2\x2\xAA\xAB\am\x2\x2\xAB\xAC");
		sb.Append("\a\x64\x2\x2\xAC\xAD\aq\x2\x2\xAD\xB7\az\x2\x2\xAE\xAF\a\x66");
		sb.Append("\x2\x2\xAF\xB0\at\x2\x2\xB0\xB1\aq\x2\x2\xB1\xB2\ar\x2\x2\xB2");
		sb.Append("\xB3\a\x66\x2\x2\xB3\xB4\aq\x2\x2\xB4\xB5\ay\x2\x2\xB5\xB7\a");
		sb.Append("p\x2\x2\xB6\x90\x3\x2\x2\x2\xB6\x97\x3\x2\x2\x2\xB6\x9D\x3\x2");
		sb.Append("\x2\x2\xB6\xA1\x3\x2\x2\x2\xB6\xA6\x3\x2\x2\x2\xB6\xAE\x3\x2");
		sb.Append("\x2\x2\xB7\x1E\x3\x2\x2\x2\xB8\xBC\t\x4\x2\x2\xB9\xBB\t\x5\x2");
		sb.Append("\x2\xBA\xB9\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2");
		sb.Append("\x2\xBC\xBD\x3\x2\x2\x2\xBD \x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2");
		sb.Append("\xBF\xC0\ay\x2\x2\xC0\xC1\ak\x2\x2\xC1\xC2\a\x66\x2\x2\xC2\xC3");
		sb.Append("\av\x2\x2\xC3\xD6\aj\x2\x2\xC4\xC5\ah\x2\x2\xC5\xC6\aq\x2\x2");
		sb.Append("\xC6\xC7\ap\x2\x2\xC7\xD6\av\x2\x2\xC8\xC9\ah\x2\x2\xC9\xCA");
		sb.Append("\aq\x2\x2\xCA\xCB\ap\x2\x2\xCB\xCC\av\x2\x2\xCC\xCD\au\x2\x2");
		sb.Append("\xCD\xCE\ak\x2\x2\xCE\xCF\a|\x2\x2\xCF\xD6\ag\x2\x2\xD0\xD1");
		sb.Append("\a\x65\x2\x2\xD1\xD2\aq\x2\x2\xD2\xD3\an\x2\x2\xD3\xD4\aq\x2");
		sb.Append("\x2\xD4\xD6\at\x2\x2\xD5\xBF\x3\x2\x2\x2\xD5\xC4\x3\x2\x2\x2");
		sb.Append("\xD5\xC8\x3\x2\x2\x2\xD5\xD0\x3\x2\x2\x2\xD6\"\x3\x2\x2\x2\n");
		sb.Append("\x2\\\x66t\x8E\xB6\xBC\xD5\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
