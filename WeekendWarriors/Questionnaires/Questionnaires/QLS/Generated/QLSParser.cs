//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Boukr\Documents\myriad-ql\WeekendWarriors\Questionnaires\Questionnaires\\QLS\Grammar\QLS.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QLSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		Whitespace=10, MultiLineComment=11, SingleLineComment=12, HexDigit=13, 
		Property=14, Type=15, Widget=16, Identifier=17, ColorLiteral=18, StringLiteral=19, 
		NumberLiteral=20;
	public const int
		RULE_stylesheet = 0, RULE_page = 1, RULE_section = 2, RULE_widget = 3, 
		RULE_question = 4, RULE_defaultStyle = 5, RULE_setting = 6;
	public static readonly string[] ruleNames = {
		"stylesheet", "page", "section", "widget", "question", "defaultStyle", 
		"setting"
	};

	private static readonly string[] _LiteralNames = {
		null, "'stylesheet'", "'{'", "'}'", "'page'", "'section'", "'widget'", 
		"'question'", "'default'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "Whitespace", 
		"MultiLineComment", "SingleLineComment", "HexDigit", "Property", "Type", 
		"Widget", "Identifier", "ColorLiteral", "StringLiteral", "NumberLiteral"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QLS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QLSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public QLSParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StylesheetContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QLSParser.Identifier, 0); }
		public PageContext[] page() {
			return GetRuleContexts<PageContext>();
		}
		public PageContext page(int i) {
			return GetRuleContext<PageContext>(i);
		}
		public StylesheetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stylesheet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.EnterStylesheet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.ExitStylesheet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLSVisitor<TResult> typedVisitor = visitor as IQLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStylesheet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StylesheetContext stylesheet() {
		StylesheetContext _localctx = new StylesheetContext(Context, State);
		EnterRule(_localctx, 0, RULE_stylesheet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(T__0);
			State = 15; Match(Identifier);
			State = 16; Match(T__1);
			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 17; page();
				}
				}
				State = 22;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 23; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PageContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QLSParser.Identifier, 0); }
		public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		public DefaultStyleContext[] defaultStyle() {
			return GetRuleContexts<DefaultStyleContext>();
		}
		public DefaultStyleContext defaultStyle(int i) {
			return GetRuleContext<DefaultStyleContext>(i);
		}
		public PageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_page; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.EnterPage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.ExitPage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLSVisitor<TResult> typedVisitor = visitor as IQLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PageContext page() {
		PageContext _localctx = new PageContext(Context, State);
		EnterRule(_localctx, 2, RULE_page);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(T__3);
			State = 26; Match(Identifier);
			State = 27; Match(T__1);
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4 || _la==T__7) {
				{
				State = 30;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 28; section();
					}
					break;
				case T__7:
					{
					State = 29; defaultStyle();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 35; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(QLSParser.StringLiteral, 0); }
		public QuestionContext[] question() {
			return GetRuleContexts<QuestionContext>();
		}
		public QuestionContext question(int i) {
			return GetRuleContext<QuestionContext>(i);
		}
		public DefaultStyleContext[] defaultStyle() {
			return GetRuleContexts<DefaultStyleContext>();
		}
		public DefaultStyleContext defaultStyle(int i) {
			return GetRuleContext<DefaultStyleContext>(i);
		}
		public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.EnterSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.ExitSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLSVisitor<TResult> typedVisitor = visitor as IQLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(T__4);
			State = 38; Match(StringLiteral);
			State = 39; Match(T__1);
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__7))) != 0)) {
				{
				State = 43;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__6:
					{
					State = 40; question();
					}
					break;
				case T__7:
					{
					State = 41; defaultStyle();
					}
					break;
				case T__4:
					{
					State = 42; section();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 48; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidgetContext : ParserRuleContext {
		public ITerminalNode Widget() { return GetToken(QLSParser.Widget, 0); }
		public WidgetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.EnterWidget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.ExitWidget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLSVisitor<TResult> typedVisitor = visitor as IQLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidgetContext widget() {
		WidgetContext _localctx = new WidgetContext(Context, State);
		EnterRule(_localctx, 6, RULE_widget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(T__5);
			State = 51; Match(Widget);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QLSParser.Identifier, 0); }
		public WidgetContext widget() {
			return GetRuleContext<WidgetContext>(0);
		}
		public QuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_question; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.EnterQuestion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.ExitQuestion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLSVisitor<TResult> typedVisitor = visitor as IQLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionContext question() {
		QuestionContext _localctx = new QuestionContext(Context, State);
		EnterRule(_localctx, 8, RULE_question);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(T__6);
			State = 54; Match(Identifier);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 55; Match(T__1);
				State = 56; widget();
				State = 57; Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStyleContext : ParserRuleContext {
		public ITerminalNode Type() { return GetToken(QLSParser.Type, 0); }
		public WidgetContext widget() {
			return GetRuleContext<WidgetContext>(0);
		}
		public SettingContext[] setting() {
			return GetRuleContexts<SettingContext>();
		}
		public SettingContext setting(int i) {
			return GetRuleContext<SettingContext>(i);
		}
		public DefaultStyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStyle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.EnterDefaultStyle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.ExitDefaultStyle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLSVisitor<TResult> typedVisitor = visitor as IQLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStyle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStyleContext defaultStyle() {
		DefaultStyleContext _localctx = new DefaultStyleContext(Context, State);
		EnterRule(_localctx, 10, RULE_defaultStyle);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(T__7);
			State = 62; Match(Type);
			State = 63; Match(T__1);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Property) {
				{
				{
				State = 64; setting();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70; widget();
			State = 71; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SettingContext : ParserRuleContext {
		public ITerminalNode Property() { return GetToken(QLSParser.Property, 0); }
		public ITerminalNode StringLiteral() { return GetToken(QLSParser.StringLiteral, 0); }
		public ITerminalNode NumberLiteral() { return GetToken(QLSParser.NumberLiteral, 0); }
		public ITerminalNode ColorLiteral() { return GetToken(QLSParser.ColorLiteral, 0); }
		public SettingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setting; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.EnterSetting(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLSListener typedListener = listener as IQLSListener;
			if (typedListener != null) typedListener.ExitSetting(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLSVisitor<TResult> typedVisitor = visitor as IQLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SettingContext setting() {
		SettingContext _localctx = new SettingContext(Context, State);
		EnterRule(_localctx, 12, RULE_setting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(Property);
			State = 74; Match(T__8);
			State = 75;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ColorLiteral) | (1L << StringLiteral) | (1L << NumberLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x16");
		sb.Append("P\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4");
		sb.Append("\a\t\a\x4\b\t\b\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x15\n\x2\f\x2\xE");
		sb.Append("\x2\x18\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3");
		sb.Append("!\n\x3\f\x3\xE\x3$\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\a\x4.\n\x4\f\x4\xE\x4\x31\v\x4\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6>\n\x6");
		sb.Append("\x3\a\x3\a\x3\a\x3\a\a\a\x44\n\a\f\a\xE\aG\v\a\x3\a\x3\a\x3");
		sb.Append("\a\x3\b\x3\b\x3\b\x3\b\x3\b\x2\x2\t\x2\x4\x6\b\n\f\xE\x2\x3");
		sb.Append("\x3\x2\x14\x16P\x2\x10\x3\x2\x2\x2\x4\x1B\x3\x2\x2\x2\x6\'\x3");
		sb.Append("\x2\x2\x2\b\x34\x3\x2\x2\x2\n\x37\x3\x2\x2\x2\f?\x3\x2\x2\x2");
		sb.Append("\xEK\x3\x2\x2\x2\x10\x11\a\x3\x2\x2\x11\x12\a\x13\x2\x2\x12");
		sb.Append("\x16\a\x4\x2\x2\x13\x15\x5\x4\x3\x2\x14\x13\x3\x2\x2\x2\x15");
		sb.Append("\x18\x3\x2\x2\x2\x16\x14\x3\x2\x2\x2\x16\x17\x3\x2\x2\x2\x17");
		sb.Append("\x19\x3\x2\x2\x2\x18\x16\x3\x2\x2\x2\x19\x1A\a\x5\x2\x2\x1A");
		sb.Append("\x3\x3\x2\x2\x2\x1B\x1C\a\x6\x2\x2\x1C\x1D\a\x13\x2\x2\x1D\"");
		sb.Append("\a\x4\x2\x2\x1E!\x5\x6\x4\x2\x1F!\x5\f\a\x2 \x1E\x3\x2\x2\x2");
		sb.Append(" \x1F\x3\x2\x2\x2!$\x3\x2\x2\x2\" \x3\x2\x2\x2\"#\x3\x2\x2\x2");
		sb.Append("#%\x3\x2\x2\x2$\"\x3\x2\x2\x2%&\a\x5\x2\x2&\x5\x3\x2\x2\x2\'");
		sb.Append("(\a\a\x2\x2()\a\x15\x2\x2)/\a\x4\x2\x2*.\x5\n\x6\x2+.\x5\f\a");
		sb.Append("\x2,.\x5\x6\x4\x2-*\x3\x2\x2\x2-+\x3\x2\x2\x2-,\x3\x2\x2\x2");
		sb.Append(".\x31\x3\x2\x2\x2/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x32\x3");
		sb.Append("\x2\x2\x2\x31/\x3\x2\x2\x2\x32\x33\a\x5\x2\x2\x33\a\x3\x2\x2");
		sb.Append("\x2\x34\x35\a\b\x2\x2\x35\x36\a\x12\x2\x2\x36\t\x3\x2\x2\x2");
		sb.Append("\x37\x38\a\t\x2\x2\x38=\a\x13\x2\x2\x39:\a\x4\x2\x2:;\x5\b\x5");
		sb.Append("\x2;<\a\x5\x2\x2<>\x3\x2\x2\x2=\x39\x3\x2\x2\x2=>\x3\x2\x2\x2");
		sb.Append(">\v\x3\x2\x2\x2?@\a\n\x2\x2@\x41\a\x11\x2\x2\x41\x45\a\x4\x2");
		sb.Append("\x2\x42\x44\x5\xE\b\x2\x43\x42\x3\x2\x2\x2\x44G\x3\x2\x2\x2");
		sb.Append("\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46H\x3\x2\x2\x2G\x45");
		sb.Append("\x3\x2\x2\x2HI\x5\b\x5\x2IJ\a\x5\x2\x2J\r\x3\x2\x2\x2KL\a\x10");
		sb.Append("\x2\x2LM\a\v\x2\x2MN\t\x2\x2\x2N\xF\x3\x2\x2\x2\t\x16 \"-/=");
		sb.Append("\x45");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
