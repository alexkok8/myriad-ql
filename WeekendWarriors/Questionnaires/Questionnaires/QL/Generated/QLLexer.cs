//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Boukr\Documents\myriad-ql\WeekendWarriors\Questionnaires\Questionnaires\\QL\Grammar\QL.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, Whitespace=22, MultiLineComment=23, 
		SingleLineComment=24, StringLiteral=25, BooleanLiteral=26, NumberLiteral=27, 
		MoneyLiteral=28, Type=29, Identifier=30;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "Whitespace", "MultiLineComment", 
		"SingleLineComment", "StringLiteral", "BooleanLiteral", "NumberLiteral", 
		"MoneyLiteral", "Type", "Identifier"
	};


	public QLLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'form'", "'{'", "'}'", "'('", "')'", "':'", "'if'", "'else'", "'!'", 
		"'-'", "'+'", "'/'", "'*'", "'<'", "'<='", "'>'", "'>='", "'!='", "'=='", 
		"'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "Whitespace", 
		"MultiLineComment", "SingleLineComment", "StringLiteral", "BooleanLiteral", 
		"NumberLiteral", "MoneyLiteral", "Type", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2 \xE6");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3");
		sb.Append("\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3");
		sb.Append("\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12");
		sb.Append("\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3");
		sb.Append("\x15\x3\x16\x3\x16\x3\x16\x3\x17\x6\x17x\n\x17\r\x17\xE\x17");
		sb.Append("y\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x82\n\x18");
		sb.Append("\f\x18\xE\x18\x85\v\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3");
		sb.Append("\x19\x3\x19\x3\x19\x3\x19\a\x19\x90\n\x19\f\x19\xE\x19\x93\v");
		sb.Append("\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\a\x1A\x99\n\x1A\f\x1A\xE\x1A");
		sb.Append("\x9C\v\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\xA9\n\x1B\x3\x1C\x6\x1C");
		sb.Append("\xAC\n\x1C\r\x1C\xE\x1C\xAD\x3\x1D\x6\x1D\xB1\n\x1D\r\x1D\xE");
		sb.Append("\x1D\xB2\x3\x1D\x3\x1D\x6\x1D\xB7\n\x1D\r\x1D\xE\x1D\xB8\x3");
		sb.Append("\x1D\x3\x1D\x6\x1D\xBD\n\x1D\r\x1D\xE\x1D\xBE\x3\x1D\x6\x1D");
		sb.Append("\xC2\n\x1D\r\x1D\xE\x1D\xC3\x3\x1D\x5\x1D\xC7\n\x1D\x3\x1E\x3");
		sb.Append("\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E");
		sb.Append("\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3");
		sb.Append("\x1E\x3\x1E\x3\x1E\x5\x1E\xDE\n\x1E\x3\x1F\x3\x1F\a\x1F\xE2");
		sb.Append("\n\x1F\f\x1F\xE\x1F\xE5\v\x1F\x3\x83\x2 \x3\x3\x5\x4\a\x5\t");
		sb.Append("\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10");
		sb.Append("\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19\x31\x1A\x33");
		sb.Append("\x1B\x35\x1C\x37\x1D\x39\x1E;\x1F= \x3\x2\a\x5\x2\v\f\xE\xF");
		sb.Append("\"\"\x4\x2\f\f\xF\xF\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6\x2");
		sb.Append("\x32;\x43\\\x61\x61\x63|\xF5\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2");
		sb.Append("\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r");
		sb.Append("\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3");
		sb.Append("\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2");
		sb.Append("\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2");
		sb.Append("\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3");
		sb.Append("\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2");
		sb.Append("/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3");
		sb.Append("\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2");
		sb.Append("\x2\x2=\x3\x2\x2\x2\x3?\x3\x2\x2\x2\x5\x44\x3\x2\x2\x2\a\x46");
		sb.Append("\x3\x2\x2\x2\tH\x3\x2\x2\x2\vJ\x3\x2\x2\x2\rL\x3\x2\x2\x2\xF");
		sb.Append("N\x3\x2\x2\x2\x11Q\x3\x2\x2\x2\x13V\x3\x2\x2\x2\x15X\x3\x2\x2");
		sb.Append("\x2\x17Z\x3\x2\x2\x2\x19\\\x3\x2\x2\x2\x1B^\x3\x2\x2\x2\x1D");
		sb.Append("`\x3\x2\x2\x2\x1F\x62\x3\x2\x2\x2!\x65\x3\x2\x2\x2#g\x3\x2\x2");
		sb.Append("\x2%j\x3\x2\x2\x2\'m\x3\x2\x2\x2)p\x3\x2\x2\x2+s\x3\x2\x2\x2");
		sb.Append("-w\x3\x2\x2\x2/}\x3\x2\x2\x2\x31\x8B\x3\x2\x2\x2\x33\x96\x3");
		sb.Append("\x2\x2\x2\x35\xA8\x3\x2\x2\x2\x37\xAB\x3\x2\x2\x2\x39\xC6\x3");
		sb.Append("\x2\x2\x2;\xDD\x3\x2\x2\x2=\xDF\x3\x2\x2\x2?@\ah\x2\x2@\x41");
		sb.Append("\aq\x2\x2\x41\x42\at\x2\x2\x42\x43\ao\x2\x2\x43\x4\x3\x2\x2");
		sb.Append("\x2\x44\x45\a}\x2\x2\x45\x6\x3\x2\x2\x2\x46G\a\x7F\x2\x2G\b");
		sb.Append("\x3\x2\x2\x2HI\a*\x2\x2I\n\x3\x2\x2\x2JK\a+\x2\x2K\f\x3\x2\x2");
		sb.Append("\x2LM\a<\x2\x2M\xE\x3\x2\x2\x2NO\ak\x2\x2OP\ah\x2\x2P\x10\x3");
		sb.Append("\x2\x2\x2QR\ag\x2\x2RS\an\x2\x2ST\au\x2\x2TU\ag\x2\x2U\x12\x3");
		sb.Append("\x2\x2\x2VW\a#\x2\x2W\x14\x3\x2\x2\x2XY\a/\x2\x2Y\x16\x3\x2");
		sb.Append("\x2\x2Z[\a-\x2\x2[\x18\x3\x2\x2\x2\\]\a\x31\x2\x2]\x1A\x3\x2");
		sb.Append("\x2\x2^_\a,\x2\x2_\x1C\x3\x2\x2\x2`\x61\a>\x2\x2\x61\x1E\x3");
		sb.Append("\x2\x2\x2\x62\x63\a>\x2\x2\x63\x64\a?\x2\x2\x64 \x3\x2\x2\x2");
		sb.Append("\x65\x66\a@\x2\x2\x66\"\x3\x2\x2\x2gh\a@\x2\x2hi\a?\x2\x2i$");
		sb.Append("\x3\x2\x2\x2jk\a#\x2\x2kl\a?\x2\x2l&\x3\x2\x2\x2mn\a?\x2\x2");
		sb.Append("no\a?\x2\x2o(\x3\x2\x2\x2pq\a(\x2\x2qr\a(\x2\x2r*\x3\x2\x2\x2");
		sb.Append("st\a~\x2\x2tu\a~\x2\x2u,\x3\x2\x2\x2vx\t\x2\x2\x2wv\x3\x2\x2");
		sb.Append("\x2xy\x3\x2\x2\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z{\x3\x2\x2\x2");
		sb.Append("{|\b\x17\x2\x2|.\x3\x2\x2\x2}~\a\x31\x2\x2~\x7F\a,\x2\x2\x7F");
		sb.Append("\x83\x3\x2\x2\x2\x80\x82\v\x2\x2\x2\x81\x80\x3\x2\x2\x2\x82");
		sb.Append("\x85\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84");
		sb.Append("\x86\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x86\x87\a,\x2\x2\x87\x88");
		sb.Append("\a\x31\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8A\b\x18\x2\x2\x8A\x30");
		sb.Append("\x3\x2\x2\x2\x8B\x8C\a\x31\x2\x2\x8C\x8D\a\x31\x2\x2\x8D\x91");
		sb.Append("\x3\x2\x2\x2\x8E\x90\n\x3\x2\x2\x8F\x8E\x3\x2\x2\x2\x90\x93");
		sb.Append("\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x94");
		sb.Append("\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x94\x95\b\x19\x2\x2\x95\x32");
		sb.Append("\x3\x2\x2\x2\x96\x9A\a$\x2\x2\x97\x99\n\x4\x2\x2\x98\x97\x3");
		sb.Append("\x2\x2\x2\x99\x9C\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9A\x9B\x3");
		sb.Append("\x2\x2\x2\x9B\x9D\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9D\x9E\a");
		sb.Append("$\x2\x2\x9E\x34\x3\x2\x2\x2\x9F\xA0\av\x2\x2\xA0\xA1\at\x2\x2");
		sb.Append("\xA1\xA2\aw\x2\x2\xA2\xA9\ag\x2\x2\xA3\xA4\ah\x2\x2\xA4\xA5");
		sb.Append("\a\x63\x2\x2\xA5\xA6\an\x2\x2\xA6\xA7\au\x2\x2\xA7\xA9\ag\x2");
		sb.Append("\x2\xA8\x9F\x3\x2\x2\x2\xA8\xA3\x3\x2\x2\x2\xA9\x36\x3\x2\x2");
		sb.Append("\x2\xAA\xAC\x4\x32;\x2\xAB\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2");
		sb.Append("\x2\xAD\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\x38\x3\x2\x2");
		sb.Append("\x2\xAF\xB1\x4\x32;\x2\xB0\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2\x2");
		sb.Append("\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB4\x3\x2\x2");
		sb.Append("\x2\xB4\xB6\a\x30\x2\x2\xB5\xB7\x4\x32;\x2\xB6\xB5\x3\x2\x2");
		sb.Append("\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB9\x3\x2\x2");
		sb.Append("\x2\xB9\xC7\x3\x2\x2\x2\xBA\xBC\a\x30\x2\x2\xBB\xBD\x4\x32;");
		sb.Append("\x2\xBC\xBB\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBC\x3\x2\x2");
		sb.Append("\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC7\x3\x2\x2\x2\xC0\xC2\x4\x32;");
		sb.Append("\x2\xC1\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC1\x3\x2\x2");
		sb.Append("\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC7\a\x30\x2");
		sb.Append("\x2\xC6\xB0\x3\x2\x2\x2\xC6\xBA\x3\x2\x2\x2\xC6\xC1\x3\x2\x2");
		sb.Append("\x2\xC7:\x3\x2\x2\x2\xC8\xC9\a\x64\x2\x2\xC9\xCA\aq\x2\x2\xCA");
		sb.Append("\xCB\aq\x2\x2\xCB\xCC\an\x2\x2\xCC\xCD\ag\x2\x2\xCD\xCE\a\x63");
		sb.Append("\x2\x2\xCE\xDE\ap\x2\x2\xCF\xD0\ak\x2\x2\xD0\xD1\ap\x2\x2\xD1");
		sb.Append("\xDE\av\x2\x2\xD2\xD3\au\x2\x2\xD3\xD4\av\x2\x2\xD4\xD5\at\x2");
		sb.Append("\x2\xD5\xD6\ak\x2\x2\xD6\xD7\ap\x2\x2\xD7\xDE\ai\x2\x2\xD8\xD9");
		sb.Append("\ao\x2\x2\xD9\xDA\aq\x2\x2\xDA\xDB\ap\x2\x2\xDB\xDC\ag\x2\x2");
		sb.Append("\xDC\xDE\a{\x2\x2\xDD\xC8\x3\x2\x2\x2\xDD\xCF\x3\x2\x2\x2\xDD");
		sb.Append("\xD2\x3\x2\x2\x2\xDD\xD8\x3\x2\x2\x2\xDE<\x3\x2\x2\x2\xDF\xE3");
		sb.Append("\t\x5\x2\x2\xE0\xE2\t\x6\x2\x2\xE1\xE0\x3\x2\x2\x2\xE2\xE5\x3");
		sb.Append("\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4>\x3\x2");
		sb.Append("\x2\x2\xE5\xE3\x3\x2\x2\x2\x10\x2y\x83\x91\x9A\xA8\xAD\xB2\xB8");
		sb.Append("\xBE\xC3\xC6\xDD\xE3\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
