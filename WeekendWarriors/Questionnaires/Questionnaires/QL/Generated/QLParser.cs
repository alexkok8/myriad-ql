//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Boukr\Documents\myriad-ql\WeekendWarriors\Questionnaires\Questionnaires\\QL\Grammar\QL.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, Whitespace=22, MultiLineComment=23, 
		SingleLineComment=24, StringLiteral=25, BooleanLiteral=26, NumberLiteral=27, 
		MoneyLiteral=28, Type=29, Identifier=30;
	public const int
		RULE_form = 0, RULE_statement = 1, RULE_computedQuestion = 2, RULE_question = 3, 
		RULE_conditionalBlock = 4, RULE_composite = 5, RULE_expression = 6;
	public static readonly string[] ruleNames = {
		"form", "statement", "computedQuestion", "question", "conditionalBlock", 
		"composite", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'form'", "'{'", "'}'", "'('", "')'", "':'", "'if'", "'else'", "'!'", 
		"'-'", "'+'", "'/'", "'*'", "'<'", "'<='", "'>'", "'>='", "'!='", "'=='", 
		"'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "Whitespace", 
		"MultiLineComment", "SingleLineComment", "StringLiteral", "BooleanLiteral", 
		"NumberLiteral", "MoneyLiteral", "Type", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public QLParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FormContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QLParser.Identifier, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 0, RULE_form);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(T__0);
			State = 15; Match(Identifier);
			State = 16; Match(T__1);
			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6 || _la==Identifier) {
				{
				{
				State = 17; statement();
				}
				}
				State = 22;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 23; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public QuestionContext question() {
			return GetRuleContext<QuestionContext>(0);
		}
		public ComputedQuestionContext computedQuestion() {
			return GetRuleContext<ComputedQuestionContext>(0);
		}
		public ConditionalBlockContext conditionalBlock() {
			return GetRuleContext<ConditionalBlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 28;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25; question();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26; computedQuestion();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 27; conditionalBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputedQuestionContext : ParserRuleContext {
		public QuestionContext question() {
			return GetRuleContext<QuestionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ComputedQuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computedQuestion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterComputedQuestion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitComputedQuestion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputedQuestionContext computedQuestion() {
		ComputedQuestionContext _localctx = new ComputedQuestionContext(Context, State);
		EnterRule(_localctx, 4, RULE_computedQuestion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; question();
			State = 31; Match(T__3);
			State = 32; expression(0);
			State = 33; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QLParser.Identifier, 0); }
		public ITerminalNode StringLiteral() { return GetToken(QLParser.StringLiteral, 0); }
		public ITerminalNode Type() { return GetToken(QLParser.Type, 0); }
		public QuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_question; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterQuestion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitQuestion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionContext question() {
		QuestionContext _localctx = new QuestionContext(Context, State);
		EnterRule(_localctx, 6, RULE_question);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(Identifier);
			State = 36; Match(T__5);
			State = 37; Match(StringLiteral);
			State = 38; Match(Type);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalBlockContext : ParserRuleContext {
		public ExpressionContext condition;
		public CompositeContext thenBlock;
		public CompositeContext elseBlock;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompositeContext[] composite() {
			return GetRuleContexts<CompositeContext>();
		}
		public CompositeContext composite(int i) {
			return GetRuleContext<CompositeContext>(i);
		}
		public ConditionalBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterConditionalBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitConditionalBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalBlockContext conditionalBlock() {
		ConditionalBlockContext _localctx = new ConditionalBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_conditionalBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(T__6);
			State = 41; Match(T__3);
			State = 42; _localctx.condition = expression(0);
			State = 43; Match(T__4);
			State = 44; _localctx.thenBlock = composite();
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 45; Match(T__7);
				State = 46; _localctx.elseBlock = composite();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompositeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composite; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterComposite(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitComposite(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeContext composite() {
		CompositeContext _localctx = new CompositeContext(Context, State);
		EnterRule(_localctx, 10, RULE_composite);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(T__1);
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6 || _la==Identifier) {
				{
				{
				State = 50; statement();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 56; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MoneyContext : ExpressionContext {
		public ITerminalNode MoneyLiteral() { return GetToken(QLParser.MoneyLiteral, 0); }
		public MoneyContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterMoney(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitMoney(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoney(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryOpContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpressionContext {
		public ITerminalNode NumberLiteral() { return GetToken(QLParser.NumberLiteral, 0); }
		public NumberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(QLParser.BooleanLiteral, 0); }
		public BoolContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(QLParser.StringLiteral, 0); }
		public StringContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(QLParser.Identifier, 0); }
		public IDContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryOpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQLListener typedListener = listener as IQLListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 59; Match(StringLiteral);
				}
				break;
			case BooleanLiteral:
				{
				_localctx = new BoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 60; Match(BooleanLiteral);
				}
				break;
			case NumberLiteral:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 61; Match(NumberLiteral);
				}
				break;
			case Identifier:
				{
				_localctx = new IDContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62; Match(Identifier);
				}
				break;
			case MoneyLiteral:
				{
				_localctx = new MoneyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 63; Match(MoneyLiteral);
				}
				break;
			case T__3:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 64; ((ParensContext)_localctx).op = Match(T__3);
				State = 65; expression(0);
				State = 66; Match(T__4);
				}
				break;
			case T__8:
			case T__9:
			case T__10:
				{
				_localctx = new UnaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 68;
				((UnaryOpContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
					((UnaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 69; expression(7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 92;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 90;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 72;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 73;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__12) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 74; ((BinaryOpContext)_localctx).right = expression(7);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 75;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 76;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__9 || _la==T__10) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 77; ((BinaryOpContext)_localctx).right = expression(6);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 78;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 79;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16))) != 0)) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 80; ((BinaryOpContext)_localctx).right = expression(5);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 81;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 82;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__17 || _la==T__18) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 83; ((BinaryOpContext)_localctx).right = expression(4);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 84;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 85; ((BinaryOpContext)_localctx).op = Match(T__19);
						State = 86; ((BinaryOpContext)_localctx).right = expression(3);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 87;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 88; ((BinaryOpContext)_localctx).op = Match(T__20);
						State = 89; ((BinaryOpContext)_localctx).right = expression(2);
						}
						break;
					}
					} 
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3 \x62");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x15\n\x2\f\x2\xE");
		sb.Append("\x2\x18\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3\x1F\n\x3\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x32\n\x6\x3\a");
		sb.Append("\x3\a\a\a\x36\n\a\f\a\xE\a\x39\v\a\x3\a\x3\a\x3\b\x3\b\x3\b");
		sb.Append("\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bI\n\b\x3\b");
		sb.Append("\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b");
		sb.Append("\x3\b\x3\b\x3\b\x3\b\x3\b\a\b]\n\b\f\b\xE\b`\v\b\x3\b\x2\x3");
		sb.Append("\xE\t\x2\x4\x6\b\n\f\xE\x2\a\x3\x2\v\r\x3\x2\xE\xF\x3\x2\f\r");
		sb.Append("\x3\x2\x10\x13\x3\x2\x14\x15k\x2\x10\x3\x2\x2\x2\x4\x1E\x3\x2");
		sb.Append("\x2\x2\x6 \x3\x2\x2\x2\b%\x3\x2\x2\x2\n*\x3\x2\x2\x2\f\x33\x3");
		sb.Append("\x2\x2\x2\xEH\x3\x2\x2\x2\x10\x11\a\x3\x2\x2\x11\x12\a \x2\x2");
		sb.Append("\x12\x16\a\x4\x2\x2\x13\x15\x5\x4\x3\x2\x14\x13\x3\x2\x2\x2");
		sb.Append("\x15\x18\x3\x2\x2\x2\x16\x14\x3\x2\x2\x2\x16\x17\x3\x2\x2\x2");
		sb.Append("\x17\x19\x3\x2\x2\x2\x18\x16\x3\x2\x2\x2\x19\x1A\a\x5\x2\x2");
		sb.Append("\x1A\x3\x3\x2\x2\x2\x1B\x1F\x5\b\x5\x2\x1C\x1F\x5\x6\x4\x2\x1D");
		sb.Append("\x1F\x5\n\x6\x2\x1E\x1B\x3\x2\x2\x2\x1E\x1C\x3\x2\x2\x2\x1E");
		sb.Append("\x1D\x3\x2\x2\x2\x1F\x5\x3\x2\x2\x2 !\x5\b\x5\x2!\"\a\x6\x2");
		sb.Append("\x2\"#\x5\xE\b\x2#$\a\a\x2\x2$\a\x3\x2\x2\x2%&\a \x2\x2&\'\a");
		sb.Append("\b\x2\x2\'(\a\x1B\x2\x2()\a\x1F\x2\x2)\t\x3\x2\x2\x2*+\a\t\x2");
		sb.Append("\x2+,\a\x6\x2\x2,-\x5\xE\b\x2-.\a\a\x2\x2.\x31\x5\f\a\x2/\x30");
		sb.Append("\a\n\x2\x2\x30\x32\x5\f\a\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2");
		sb.Append("\x2\x2\x32\v\x3\x2\x2\x2\x33\x37\a\x4\x2\x2\x34\x36\x5\x4\x3");
		sb.Append("\x2\x35\x34\x3\x2\x2\x2\x36\x39\x3\x2\x2\x2\x37\x35\x3\x2\x2");
		sb.Append("\x2\x37\x38\x3\x2\x2\x2\x38:\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2");
		sb.Append(":;\a\x5\x2\x2;\r\x3\x2\x2\x2<=\b\b\x1\x2=I\a\x1B\x2\x2>I\a\x1C");
		sb.Append("\x2\x2?I\a\x1D\x2\x2@I\a \x2\x2\x41I\a\x1E\x2\x2\x42\x43\a\x6");
		sb.Append("\x2\x2\x43\x44\x5\xE\b\x2\x44\x45\a\a\x2\x2\x45I\x3\x2\x2\x2");
		sb.Append("\x46G\t\x2\x2\x2GI\x5\xE\b\tH<\x3\x2\x2\x2H>\x3\x2\x2\x2H?\x3");
		sb.Append("\x2\x2\x2H@\x3\x2\x2\x2H\x41\x3\x2\x2\x2H\x42\x3\x2\x2\x2H\x46");
		sb.Append("\x3\x2\x2\x2I^\x3\x2\x2\x2JK\f\b\x2\x2KL\t\x3\x2\x2L]\x5\xE");
		sb.Append("\b\tMN\f\a\x2\x2NO\t\x4\x2\x2O]\x5\xE\b\bPQ\f\x6\x2\x2QR\t\x5");
		sb.Append("\x2\x2R]\x5\xE\b\aST\f\x5\x2\x2TU\t\x6\x2\x2U]\x5\xE\b\x6VW");
		sb.Append("\f\x4\x2\x2WX\a\x16\x2\x2X]\x5\xE\b\x5YZ\f\x3\x2\x2Z[\a\x17");
		sb.Append("\x2\x2[]\x5\xE\b\x4\\J\x3\x2\x2\x2\\M\x3\x2\x2\x2\\P\x3\x2\x2");
		sb.Append("\x2\\S\x3\x2\x2\x2\\V\x3\x2\x2\x2\\Y\x3\x2\x2\x2]`\x3\x2\x2");
		sb.Append("\x2^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_\xF\x3\x2\x2\x2`^\x3\x2\x2");
		sb.Append("\x2\t\x16\x1E\x31\x37H\\^");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
