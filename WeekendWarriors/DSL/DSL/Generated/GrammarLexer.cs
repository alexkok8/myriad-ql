//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\SoftwareConstruction\myriad-ql\WeekendWarriors\DSL\DSL\\Grammar\Grammar.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, Whitespace=14, Comment=15, SingleComment=16, 
		StringLiteral=17, BooleanLiteral=18, NumberLiteral=19, LeftParenthesis=20, 
		RightParenthesis=21, LeftBracket=22, RightBracket=23, TypeDeclarator=24, 
		IfStatement=25, ElseStatement=26, FormStatement=27, AssignmentOperator=28, 
		Type=29, Identifier=30;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "Whitespace", "Comment", "SingleComment", 
		"StringLiteral", "BooleanLiteral", "NumberLiteral", "LeftParenthesis", 
		"RightParenthesis", "LeftBracket", "RightBracket", "TypeDeclarator", "IfStatement", 
		"ElseStatement", "FormStatement", "AssignmentOperator", "Type", "Identifier"
	};


	public GrammarLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'&&'", "'||'", "'!'", "'<'", "'<='", "'>'", "'>='", "'!='", "'=='", 
		"'+'", "'-'", "'*'", "'/'", null, null, null, null, null, null, "'('", 
		"')'", "'{'", "'}'", "':'", "'if'", "'else'", "'form'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Whitespace", "Comment", "SingleComment", "StringLiteral", 
		"BooleanLiteral", "NumberLiteral", "LeftParenthesis", "RightParenthesis", 
		"LeftBracket", "RightBracket", "TypeDeclarator", "IfStatement", "ElseStatement", 
		"FormStatement", "AssignmentOperator", "Type", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2 \xCB");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n");
		sb.Append("\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x6\xF");
		sb.Append("\x61\n\xF\r\xF\xE\xF\x62\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\a\x10k\n\x10\f\x10\xE\x10n\v\x10\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\a\x11y\n\x11\f\x11\xE");
		sb.Append("\x11|\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\x6\x12\x82\n\x12\r\x12");
		sb.Append("\xE\x12\x83\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13");
		sb.Append("\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x91\n\x13\x3\x14\x3\x14");
		sb.Append("\a\x14\x95\n\x14\f\x14\xE\x14\x98\v\x14\x3\x15\x3\x15\x3\x16");
		sb.Append("\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3");
		sb.Append("\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C");
		sb.Append("\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3");
		sb.Append("\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E");
		sb.Append("\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\xC3\n\x1E\x3\x1F\x3\x1F");
		sb.Append("\a\x1F\xC7\n\x1F\f\x1F\xE\x1F\xCA\v\x1F\x3l\x2 \x3\x3\x5\x4");
		sb.Append("\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF");
		sb.Append("\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19\x31");
		sb.Append("\x1A\x33\x1B\x35\x1C\x37\x1D\x39\x1E;\x1F= \x3\x2\a\x5\x2\v");
		sb.Append("\f\xE\xF\"\"\x4\x2\f\f\xF\xF\x3\x2$$\x6\x2&&\x43\\\x61\x61\x63");
		sb.Append("|\a\x2&&\x32;\x43\\\x61\x61\x63|\xD3\x2\x3\x3\x2\x2\x2\x2\x5");
		sb.Append("\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2");
		sb.Append("\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2");
		sb.Append("\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19");
		sb.Append("\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3");
		sb.Append("\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2");
		sb.Append("\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2");
		sb.Append("\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2");
		sb.Append("\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3");
		sb.Append("\x2\x2\x2\x2=\x3\x2\x2\x2\x3?\x3\x2\x2\x2\x5\x42\x3\x2\x2\x2");
		sb.Append("\a\x45\x3\x2\x2\x2\tG\x3\x2\x2\x2\vI\x3\x2\x2\x2\rL\x3\x2\x2");
		sb.Append("\x2\xFN\x3\x2\x2\x2\x11Q\x3\x2\x2\x2\x13T\x3\x2\x2\x2\x15W\x3");
		sb.Append("\x2\x2\x2\x17Y\x3\x2\x2\x2\x19[\x3\x2\x2\x2\x1B]\x3\x2\x2\x2");
		sb.Append("\x1D`\x3\x2\x2\x2\x1F\x66\x3\x2\x2\x2!t\x3\x2\x2\x2#\x7F\x3");
		sb.Append("\x2\x2\x2%\x90\x3\x2\x2\x2\'\x92\x3\x2\x2\x2)\x99\x3\x2\x2\x2");
		sb.Append("+\x9B\x3\x2\x2\x2-\x9D\x3\x2\x2\x2/\x9F\x3\x2\x2\x2\x31\xA1");
		sb.Append("\x3\x2\x2\x2\x33\xA3\x3\x2\x2\x2\x35\xA6\x3\x2\x2\x2\x37\xAB");
		sb.Append("\x3\x2\x2\x2\x39\xB0\x3\x2\x2\x2;\xC2\x3\x2\x2\x2=\xC4\x3\x2");
		sb.Append("\x2\x2?@\a(\x2\x2@\x41\a(\x2\x2\x41\x4\x3\x2\x2\x2\x42\x43\a");
		sb.Append("~\x2\x2\x43\x44\a~\x2\x2\x44\x6\x3\x2\x2\x2\x45\x46\a#\x2\x2");
		sb.Append("\x46\b\x3\x2\x2\x2GH\a>\x2\x2H\n\x3\x2\x2\x2IJ\a>\x2\x2JK\a");
		sb.Append("?\x2\x2K\f\x3\x2\x2\x2LM\a@\x2\x2M\xE\x3\x2\x2\x2NO\a@\x2\x2");
		sb.Append("OP\a?\x2\x2P\x10\x3\x2\x2\x2QR\a#\x2\x2RS\a?\x2\x2S\x12\x3\x2");
		sb.Append("\x2\x2TU\a?\x2\x2UV\a?\x2\x2V\x14\x3\x2\x2\x2WX\a-\x2\x2X\x16");
		sb.Append("\x3\x2\x2\x2YZ\a/\x2\x2Z\x18\x3\x2\x2\x2[\\\a,\x2\x2\\\x1A\x3");
		sb.Append("\x2\x2\x2]^\a\x31\x2\x2^\x1C\x3\x2\x2\x2_\x61\t\x2\x2\x2`_\x3");
		sb.Append("\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2");
		sb.Append("\x2\x2\x63\x64\x3\x2\x2\x2\x64\x65\b\xF\x2\x2\x65\x1E\x3\x2");
		sb.Append("\x2\x2\x66g\a\x31\x2\x2gh\a,\x2\x2hl\x3\x2\x2\x2ik\v\x2\x2\x2");
		sb.Append("ji\x3\x2\x2\x2kn\x3\x2\x2\x2lm\x3\x2\x2\x2lj\x3\x2\x2\x2mo\x3");
		sb.Append("\x2\x2\x2nl\x3\x2\x2\x2op\a,\x2\x2pq\a\x31\x2\x2qr\x3\x2\x2");
		sb.Append("\x2rs\b\x10\x3\x2s \x3\x2\x2\x2tu\a\x31\x2\x2uv\a\x31\x2\x2");
		sb.Append("vz\x3\x2\x2\x2wy\n\x3\x2\x2xw\x3\x2\x2\x2y|\x3\x2\x2\x2zx\x3");
		sb.Append("\x2\x2\x2z{\x3\x2\x2\x2{}\x3\x2\x2\x2|z\x3\x2\x2\x2}~\b\x11");
		sb.Append("\x3\x2~\"\x3\x2\x2\x2\x7F\x81\a$\x2\x2\x80\x82\n\x4\x2\x2\x81");
		sb.Append("\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x83");
		sb.Append("\x84\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\a$\x2\x2\x86$\x3");
		sb.Append("\x2\x2\x2\x87\x88\av\x2\x2\x88\x89\at\x2\x2\x89\x8A\aw\x2\x2");
		sb.Append("\x8A\x91\ag\x2\x2\x8B\x8C\ah\x2\x2\x8C\x8D\a\x63\x2\x2\x8D\x8E");
		sb.Append("\an\x2\x2\x8E\x8F\au\x2\x2\x8F\x91\ag\x2\x2\x90\x87\x3\x2\x2");
		sb.Append("\x2\x90\x8B\x3\x2\x2\x2\x91&\x3\x2\x2\x2\x92\x96\x4\x33;\x2");
		sb.Append("\x93\x95\x4\x32;\x2\x94\x93\x3\x2\x2\x2\x95\x98\x3\x2\x2\x2");
		sb.Append("\x96\x94\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97(\x3\x2\x2\x2\x98");
		sb.Append("\x96\x3\x2\x2\x2\x99\x9A\a*\x2\x2\x9A*\x3\x2\x2\x2\x9B\x9C\a");
		sb.Append("+\x2\x2\x9C,\x3\x2\x2\x2\x9D\x9E\a}\x2\x2\x9E.\x3\x2\x2\x2\x9F");
		sb.Append("\xA0\a\x7F\x2\x2\xA0\x30\x3\x2\x2\x2\xA1\xA2\a<\x2\x2\xA2\x32");
		sb.Append("\x3\x2\x2\x2\xA3\xA4\ak\x2\x2\xA4\xA5\ah\x2\x2\xA5\x34\x3\x2");
		sb.Append("\x2\x2\xA6\xA7\ag\x2\x2\xA7\xA8\an\x2\x2\xA8\xA9\au\x2\x2\xA9");
		sb.Append("\xAA\ag\x2\x2\xAA\x36\x3\x2\x2\x2\xAB\xAC\ah\x2\x2\xAC\xAD\a");
		sb.Append("q\x2\x2\xAD\xAE\at\x2\x2\xAE\xAF\ao\x2\x2\xAF\x38\x3\x2\x2\x2");
		sb.Append("\xB0\xB1\a?\x2\x2\xB1:\x3\x2\x2\x2\xB2\xB3\a\x64\x2\x2\xB3\xB4");
		sb.Append("\aq\x2\x2\xB4\xB5\aq\x2\x2\xB5\xB6\an\x2\x2\xB6\xB7\ag\x2\x2");
		sb.Append("\xB7\xB8\a\x63\x2\x2\xB8\xC3\ap\x2\x2\xB9\xBA\ak\x2\x2\xBA\xBB");
		sb.Append("\ap\x2\x2\xBB\xC3\av\x2\x2\xBC\xBD\au\x2\x2\xBD\xBE\av\x2\x2");
		sb.Append("\xBE\xBF\at\x2\x2\xBF\xC0\ak\x2\x2\xC0\xC1\ap\x2\x2\xC1\xC3");
		sb.Append("\ai\x2\x2\xC2\xB2\x3\x2\x2\x2\xC2\xB9\x3\x2\x2\x2\xC2\xBC\x3");
		sb.Append("\x2\x2\x2\xC3<\x3\x2\x2\x2\xC4\xC8\t\x5\x2\x2\xC5\xC7\t\x6\x2");
		sb.Append("\x2\xC6\xC5\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2");
		sb.Append("\x2\xC8\xC9\x3\x2\x2\x2\xC9>\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2");
		sb.Append("\v\x2\x62lz\x83\x90\x96\xC2\xC8\x4\x2\x3\x2\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
