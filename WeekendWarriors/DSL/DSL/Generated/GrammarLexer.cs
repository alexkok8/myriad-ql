//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\SoftwareConstruction\myriad-ql\WeekendWarriors\DSL\DSL\\Grammar\Grammar.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Unit=1, Form=2, ConditionalQuestions=3, Statement=4, QuestionWithVariable=5, 
		Expression=6, Constant=7, EscapeSequence=8;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Unit", "Form", "ConditionalQuestions", "Statement", "QuestionWithVariable", 
		"Expression", "Constant", "StringLiteral", "NumberLiteral", "BooleanLiteral", 
		"EscapeSequence", "UnicodeChar", "HexDigit", "OctalDigit", "LeftParenthesis", 
		"RightParenthesis", "LeftBracket", "RightBracket", "Declarator", "IfStatement", 
		"FormLiteral", "AssignmentOperator", "Identifier", "TypeDefinition"
	};


	public GrammarLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "Unit", "Form", "ConditionalQuestions", "Statement", "QuestionWithVariable", 
		"Expression", "Constant", "EscapeSequence"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\n\xD0");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\a\x2\x35\n\x2\f\x2");
		sb.Append("\xE\x2\x38\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5G\n\x5\f\x5\xE\x5J\v\x5");
		sb.Append("\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x5\x6V\n\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b]\n\b\x3\t\x3\t\x3");
		sb.Append("\t\a\t\x62\n\t\f\t\xE\t\x65\v\t\x3\t\x3\t\x3\n\x3\n\a\nk\n\n");
		sb.Append("\f\n\xE\nn\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v");
		sb.Append("\x5\vy\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x97\n\f\x3\r\x3\r\x3\r\x3");
		sb.Append("\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11");
		sb.Append("\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3");
		sb.Append("\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17");
		sb.Append("\x3\x18\x3\x18\a\x18\xBA\n\x18\f\x18\xE\x18\xBD\v\x18\x3\x19");
		sb.Append("\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3");
		sb.Append("\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\xCF\n");
		sb.Append("\x19\x2\x2\x1A\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\x2\x13");
		sb.Append("\x2\x15\x2\x17\n\x19\x2\x1B\x2\x1D\x2\x1F\x2!\x2#\x2%\x2\'\x2");
		sb.Append(")\x2+\x2-\x2/\x2\x31\x2\x3\x2\x6\x4\x2$$^^\x5\x2\x32;\x43H\x63");
		sb.Append("h\x6\x2&&\x43\\\x61\x61\x63|\a\x2&&\x32;\x43\\\x61\x61\x63|");
		sb.Append("\xD7\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2");
		sb.Append("\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2");
		sb.Append("\x2\x2\x2\x17\x3\x2\x2\x2\x3\x36\x3\x2\x2\x2\x5\x39\x3\x2\x2");
		sb.Append("\x2\a=\x3\x2\x2\x2\t\x43\x3\x2\x2\x2\vM\x3\x2\x2\x2\rW\x3\x2");
		sb.Append("\x2\x2\xF\\\x3\x2\x2\x2\x11^\x3\x2\x2\x2\x13h\x3\x2\x2\x2\x15");
		sb.Append("x\x3\x2\x2\x2\x17\x96\x3\x2\x2\x2\x19\x98\x3\x2\x2\x2\x1B\x9F");
		sb.Append("\x3\x2\x2\x2\x1D\xA1\x3\x2\x2\x2\x1F\xA3\x3\x2\x2\x2!\xA5\x3");
		sb.Append("\x2\x2\x2#\xA7\x3\x2\x2\x2%\xA9\x3\x2\x2\x2\'\xAB\x3\x2\x2\x2");
		sb.Append(")\xAD\x3\x2\x2\x2+\xB0\x3\x2\x2\x2-\xB5\x3\x2\x2\x2/\xB7\x3");
		sb.Append("\x2\x2\x2\x31\xCE\x3\x2\x2\x2\x33\x35\x5\x5\x3\x2\x34\x33\x3");
		sb.Append("\x2\x2\x2\x35\x38\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x36\x37\x3");
		sb.Append("\x2\x2\x2\x37\x4\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x39:\x5+\x16");
		sb.Append("\x2:;\x5/\x18\x2;<\x5\t\x5\x2<\x6\x3\x2\x2\x2=>\x5)\x15\x2>");
		sb.Append("?\x5\x1F\x10\x2?@\x5\r\a\x2@\x41\x5!\x11\x2\x41\x42\x5\t\x5");
		sb.Append("\x2\x42\b\x3\x2\x2\x2\x43H\x5#\x12\x2\x44G\x5\v\x6\x2\x45G\x5");
		sb.Append("\a\x4\x2\x46\x44\x3\x2\x2\x2\x46\x45\x3\x2\x2\x2GJ\x3\x2\x2");
		sb.Append("\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IK\x3\x2\x2\x2JH\x3\x2\x2");
		sb.Append("\x2KL\x5%\x13\x2L\n\x3\x2\x2\x2MN\x5\x11\t\x2NO\x5/\x18\x2O");
		sb.Append("P\x5\'\x14\x2PU\x5\x31\x19\x2QR\x5-\x17\x2RS\x5\r\a\x2SV\x3");
		sb.Append("\x2\x2\x2TV\x3\x2\x2\x2UQ\x3\x2\x2\x2UT\x3\x2\x2\x2V\f\x3\x2");
		sb.Append("\x2\x2WX\x5\t\x5\x2X\xE\x3\x2\x2\x2Y]\x5\x11\t\x2Z]\x5\x13\n");
		sb.Append("\x2[]\x5\x15\v\x2\\Y\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\[\x3\x2\x2");
		sb.Append("\x2]\x10\x3\x2\x2\x2^\x63\a$\x2\x2_\x62\n\x2\x2\x2`\x62\x5\x17");
		sb.Append("\f\x2\x61_\x3\x2\x2\x2\x61`\x3\x2\x2\x2\x62\x65\x3\x2\x2\x2");
		sb.Append("\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x66\x3\x2\x2\x2");
		sb.Append("\x65\x63\x3\x2\x2\x2\x66g\a$\x2\x2g\x12\x3\x2\x2\x2hl\x4\x33");
		sb.Append(";\x2ik\x4\x32;\x2ji\x3\x2\x2\x2kn\x3\x2\x2\x2lj\x3\x2\x2\x2");
		sb.Append("lm\x3\x2\x2\x2m\x14\x3\x2\x2\x2nl\x3\x2\x2\x2op\av\x2\x2pq\a");
		sb.Append("t\x2\x2qr\aw\x2\x2ry\ag\x2\x2st\ah\x2\x2tu\a\x63\x2\x2uv\an");
		sb.Append("\x2\x2vw\au\x2\x2wy\ag\x2\x2xo\x3\x2\x2\x2xs\x3\x2\x2\x2y\x16");
		sb.Append("\x3\x2\x2\x2z{\a^\x2\x2{\x97\a\x64\x2\x2|}\a^\x2\x2}\x97\av");
		sb.Append("\x2\x2~\x7F\a^\x2\x2\x7F\x97\ap\x2\x2\x80\x81\a^\x2\x2\x81\x97");
		sb.Append("\ah\x2\x2\x82\x83\a^\x2\x2\x83\x97\at\x2\x2\x84\x85\a^\x2\x2");
		sb.Append("\x85\x97\a$\x2\x2\x86\x87\a^\x2\x2\x87\x97\a)\x2\x2\x88\x89");
		sb.Append("\a^\x2\x2\x89\x97\a^\x2\x2\x8A\x8B\a^\x2\x2\x8B\x8C\x4\x32\x35");
		sb.Append("\x2\x8C\x8D\x5\x1D\xF\x2\x8D\x8E\x5\x1D\xF\x2\x8E\x97\x3\x2");
		sb.Append("\x2\x2\x8F\x90\a^\x2\x2\x90\x91\x5\x1D\xF\x2\x91\x92\x5\x1D");
		sb.Append("\xF\x2\x92\x97\x3\x2\x2\x2\x93\x94\a^\x2\x2\x94\x97\x5\x1D\xF");
		sb.Append("\x2\x95\x97\x5\x19\r\x2\x96z\x3\x2\x2\x2\x96|\x3\x2\x2\x2\x96");
		sb.Append("~\x3\x2\x2\x2\x96\x80\x3\x2\x2\x2\x96\x82\x3\x2\x2\x2\x96\x84");
		sb.Append("\x3\x2\x2\x2\x96\x86\x3\x2\x2\x2\x96\x88\x3\x2\x2\x2\x96\x8A");
		sb.Append("\x3\x2\x2\x2\x96\x8F\x3\x2\x2\x2\x96\x93\x3\x2\x2\x2\x96\x95");
		sb.Append("\x3\x2\x2\x2\x97\x18\x3\x2\x2\x2\x98\x99\a^\x2\x2\x99\x9A\a");
		sb.Append("w\x2\x2\x9A\x9B\x5\x1B\xE\x2\x9B\x9C\x5\x1B\xE\x2\x9C\x9D\x5");
		sb.Append("\x1B\xE\x2\x9D\x9E\x5\x1B\xE\x2\x9E\x1A\x3\x2\x2\x2\x9F\xA0");
		sb.Append("\t\x3\x2\x2\xA0\x1C\x3\x2\x2\x2\xA1\xA2\x4\x32\x39\x2\xA2\x1E");
		sb.Append("\x3\x2\x2\x2\xA3\xA4\a*\x2\x2\xA4 \x3\x2\x2\x2\xA5\xA6\a+\x2");
		sb.Append("\x2\xA6\"\x3\x2\x2\x2\xA7\xA8\a}\x2\x2\xA8$\x3\x2\x2\x2\xA9");
		sb.Append("\xAA\a\x7F\x2\x2\xAA&\x3\x2\x2\x2\xAB\xAC\a<\x2\x2\xAC(\x3\x2");
		sb.Append("\x2\x2\xAD\xAE\ak\x2\x2\xAE\xAF\ah\x2\x2\xAF*\x3\x2\x2\x2\xB0");
		sb.Append("\xB1\ah\x2\x2\xB1\xB2\aq\x2\x2\xB2\xB3\at\x2\x2\xB3\xB4\ao\x2");
		sb.Append("\x2\xB4,\x3\x2\x2\x2\xB5\xB6\a?\x2\x2\xB6.\x3\x2\x2\x2\xB7\xBB");
		sb.Append("\t\x4\x2\x2\xB8\xBA\t\x5\x2\x2\xB9\xB8\x3\x2\x2\x2\xBA\xBD\x3");
		sb.Append("\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\x30\x3");
		sb.Append("\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE\xBF\a\x64\x2\x2\xBF\xC0\a");
		sb.Append("q\x2\x2\xC0\xC1\aq\x2\x2\xC1\xC2\an\x2\x2\xC2\xC3\ag\x2\x2\xC3");
		sb.Append("\xC4\a\x63\x2\x2\xC4\xCF\ap\x2\x2\xC5\xC6\ak\x2\x2\xC6\xC7\a");
		sb.Append("p\x2\x2\xC7\xCF\av\x2\x2\xC8\xC9\au\x2\x2\xC9\xCA\av\x2\x2\xCA");
		sb.Append("\xCB\at\x2\x2\xCB\xCC\ak\x2\x2\xCC\xCD\ap\x2\x2\xCD\xCF\ai\x2");
		sb.Append("\x2\xCE\xBE\x3\x2\x2\x2\xCE\xC5\x3\x2\x2\x2\xCE\xC8\x3\x2\x2");
		sb.Append("\x2\xCF\x32\x3\x2\x2\x2\xF\x2\x36\x46HU\\\x61\x63lx\x96\xBB");
		sb.Append("\xCE\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
