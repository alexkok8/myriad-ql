//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Boukr\Documents\myriad-ql\WeekendWarriors\DSL\DSL\\Grammar\Grammar.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Whitespace=1, MultiLineComment=2, SingleLineComment=3, StringLiteral=4, 
		BooleanLiteral=5, NumberLiteral=6, LeftParenthesis=7, RightParenthesis=8, 
		LeftBracket=9, RightBracket=10, TypeDeclarator=11, IfStatement=12, ElseStatement=13, 
		FormStatement=14, AssignmentOperator=15, NotOperator=16, MinusOperator=17, 
		DivisionOperator=18, MultiplyOperator=19, AdditionOperator=20, SubtractionOperator=21, 
		LessThanOperator=22, LessThanOrEqualsOperator=23, GreaterThanOperator=24, 
		GreaterThanOrEqualsOperator=25, NotEqualOperator=26, EqualsOperator=27, 
		AndOperator=28, OrOperator=29, Type=30, Identifier=31;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Whitespace", "MultiLineComment", "SingleLineComment", "StringLiteral", 
		"BooleanLiteral", "NumberLiteral", "LeftParenthesis", "RightParenthesis", 
		"LeftBracket", "RightBracket", "TypeDeclarator", "IfStatement", "ElseStatement", 
		"FormStatement", "AssignmentOperator", "NotOperator", "MinusOperator", 
		"DivisionOperator", "MultiplyOperator", "AdditionOperator", "SubtractionOperator", 
		"LessThanOperator", "LessThanOrEqualsOperator", "GreaterThanOperator", 
		"GreaterThanOrEqualsOperator", "NotEqualOperator", "EqualsOperator", "AndOperator", 
		"OrOperator", "Type", "Identifier"
	};


	public GrammarLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'('", "')'", "'{'", "'}'", 
		"':'", "'if'", "'else'", "'form'", "'='", "'!'", null, "'/'", "'*'", "'+'", 
		null, "'<'", "'<='", "'>'", "'>='", "'!='", "'=='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "MultiLineComment", "SingleLineComment", "StringLiteral", 
		"BooleanLiteral", "NumberLiteral", "LeftParenthesis", "RightParenthesis", 
		"LeftBracket", "RightBracket", "TypeDeclarator", "IfStatement", "ElseStatement", 
		"FormStatement", "AssignmentOperator", "NotOperator", "MinusOperator", 
		"DivisionOperator", "MultiplyOperator", "AdditionOperator", "SubtractionOperator", 
		"LessThanOperator", "LessThanOrEqualsOperator", "GreaterThanOperator", 
		"GreaterThanOrEqualsOperator", "NotEqualOperator", "EqualsOperator", "AndOperator", 
		"OrOperator", "Type", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2!\xD0");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x3\x2\x6\x2\x43\n\x2\r\x2\xE\x2\x44\x3\x2\x3\x2\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\a\x3M\n\x3\f\x3\xE\x3P\v\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4[\n\x4\f\x4\xE\x4^\v\x4");
		sb.Append("\x3\x4\x3\x4\x3\x5\x3\x5\a\x5\x64\n\x5\f\x5\xE\x5g\v\x5\x3\x5");
		sb.Append("\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x5\x6t\n\x6\x3\a\x3\a\a\ax\n\a\f\a\xE\a{\v\a\x3\b\x3\b\x3\t");
		sb.Append("\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3");
		sb.Append("\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3");
		sb.Append("\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14");
		sb.Append("\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3");
		sb.Append("\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3");
		sb.Append("\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F");
		sb.Append("\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5");
		sb.Append("\x1F\xC8\n\x1F\x3 \x3 \a \xCC\n \f \xE \xCF\v \x3N\x2!\x3\x3");
		sb.Append("\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE");
		sb.Append("\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18");
		sb.Append("/\x19\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39\x1E;\x1F= ?!\x3\x2");
		sb.Append("\a\x5\x2\v\f\xE\xF\"\"\x4\x2\f\f\xF\xF\x3\x2$$\x5\x2\x43\\\x61");
		sb.Append("\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\xD8\x2\x3\x3\x2\x2\x2");
		sb.Append("\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3");
		sb.Append("\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2");
		sb.Append("\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2");
		sb.Append("\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2");
		sb.Append("\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2");
		sb.Append("\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3");
		sb.Append("\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2");
		sb.Append("\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2");
		sb.Append("\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x3\x42\x3\x2");
		sb.Append("\x2\x2\x5H\x3\x2\x2\x2\aV\x3\x2\x2\x2\t\x61\x3\x2\x2\x2\vs\x3");
		sb.Append("\x2\x2\x2\ru\x3\x2\x2\x2\xF|\x3\x2\x2\x2\x11~\x3\x2\x2\x2\x13");
		sb.Append("\x80\x3\x2\x2\x2\x15\x82\x3\x2\x2\x2\x17\x84\x3\x2\x2\x2\x19");
		sb.Append("\x86\x3\x2\x2\x2\x1B\x89\x3\x2\x2\x2\x1D\x8E\x3\x2\x2\x2\x1F");
		sb.Append("\x93\x3\x2\x2\x2!\x95\x3\x2\x2\x2#\x97\x3\x2\x2\x2%\x99\x3\x2");
		sb.Append("\x2\x2\'\x9B\x3\x2\x2\x2)\x9D\x3\x2\x2\x2+\x9F\x3\x2\x2\x2-");
		sb.Append("\xA1\x3\x2\x2\x2/\xA3\x3\x2\x2\x2\x31\xA6\x3\x2\x2\x2\x33\xA8");
		sb.Append("\x3\x2\x2\x2\x35\xAB\x3\x2\x2\x2\x37\xAE\x3\x2\x2\x2\x39\xB1");
		sb.Append("\x3\x2\x2\x2;\xB4\x3\x2\x2\x2=\xC7\x3\x2\x2\x2?\xC9\x3\x2\x2");
		sb.Append("\x2\x41\x43\t\x2\x2\x2\x42\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2");
		sb.Append("\x2\x44\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\x46\x3\x2\x2");
		sb.Append("\x2\x46G\b\x2\x2\x2G\x4\x3\x2\x2\x2HI\a\x31\x2\x2IJ\a,\x2\x2");
		sb.Append("JN\x3\x2\x2\x2KM\v\x2\x2\x2LK\x3\x2\x2\x2MP\x3\x2\x2\x2NO\x3");
		sb.Append("\x2\x2\x2NL\x3\x2\x2\x2OQ\x3\x2\x2\x2PN\x3\x2\x2\x2QR\a,\x2");
		sb.Append("\x2RS\a\x31\x2\x2ST\x3\x2\x2\x2TU\b\x3\x2\x2U\x6\x3\x2\x2\x2");
		sb.Append("VW\a\x31\x2\x2WX\a\x31\x2\x2X\\\x3\x2\x2\x2Y[\n\x3\x2\x2ZY\x3");
		sb.Append("\x2\x2\x2[^\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]_\x3\x2");
		sb.Append("\x2\x2^\\\x3\x2\x2\x2_`\b\x4\x2\x2`\b\x3\x2\x2\x2\x61\x65\a");
		sb.Append("$\x2\x2\x62\x64\n\x4\x2\x2\x63\x62\x3\x2\x2\x2\x64g\x3\x2\x2");
		sb.Append("\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66h\x3\x2\x2\x2");
		sb.Append("g\x65\x3\x2\x2\x2hi\a$\x2\x2i\n\x3\x2\x2\x2jk\av\x2\x2kl\at");
		sb.Append("\x2\x2lm\aw\x2\x2mt\ag\x2\x2no\ah\x2\x2op\a\x63\x2\x2pq\an\x2");
		sb.Append("\x2qr\au\x2\x2rt\ag\x2\x2sj\x3\x2\x2\x2sn\x3\x2\x2\x2t\f\x3");
		sb.Append("\x2\x2\x2uy\x4\x33;\x2vx\x4\x32;\x2wv\x3\x2\x2\x2x{\x3\x2\x2");
		sb.Append("\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z\xE\x3\x2\x2\x2{y\x3\x2\x2\x2");
		sb.Append("|}\a*\x2\x2}\x10\x3\x2\x2\x2~\x7F\a+\x2\x2\x7F\x12\x3\x2\x2");
		sb.Append("\x2\x80\x81\a}\x2\x2\x81\x14\x3\x2\x2\x2\x82\x83\a\x7F\x2\x2");
		sb.Append("\x83\x16\x3\x2\x2\x2\x84\x85\a<\x2\x2\x85\x18\x3\x2\x2\x2\x86");
		sb.Append("\x87\ak\x2\x2\x87\x88\ah\x2\x2\x88\x1A\x3\x2\x2\x2\x89\x8A\a");
		sb.Append("g\x2\x2\x8A\x8B\an\x2\x2\x8B\x8C\au\x2\x2\x8C\x8D\ag\x2\x2\x8D");
		sb.Append("\x1C\x3\x2\x2\x2\x8E\x8F\ah\x2\x2\x8F\x90\aq\x2\x2\x90\x91\a");
		sb.Append("t\x2\x2\x91\x92\ao\x2\x2\x92\x1E\x3\x2\x2\x2\x93\x94\a?\x2\x2");
		sb.Append("\x94 \x3\x2\x2\x2\x95\x96\a#\x2\x2\x96\"\x3\x2\x2\x2\x97\x98");
		sb.Append("\a/\x2\x2\x98$\x3\x2\x2\x2\x99\x9A\a\x31\x2\x2\x9A&\x3\x2\x2");
		sb.Append("\x2\x9B\x9C\a,\x2\x2\x9C(\x3\x2\x2\x2\x9D\x9E\a-\x2\x2\x9E*");
		sb.Append("\x3\x2\x2\x2\x9F\xA0\a/\x2\x2\xA0,\x3\x2\x2\x2\xA1\xA2\a>\x2");
		sb.Append("\x2\xA2.\x3\x2\x2\x2\xA3\xA4\a>\x2\x2\xA4\xA5\a?\x2\x2\xA5\x30");
		sb.Append("\x3\x2\x2\x2\xA6\xA7\a@\x2\x2\xA7\x32\x3\x2\x2\x2\xA8\xA9\a");
		sb.Append("@\x2\x2\xA9\xAA\a?\x2\x2\xAA\x34\x3\x2\x2\x2\xAB\xAC\a#\x2\x2");
		sb.Append("\xAC\xAD\a?\x2\x2\xAD\x36\x3\x2\x2\x2\xAE\xAF\a?\x2\x2\xAF\xB0");
		sb.Append("\a?\x2\x2\xB0\x38\x3\x2\x2\x2\xB1\xB2\a(\x2\x2\xB2\xB3\a(\x2");
		sb.Append("\x2\xB3:\x3\x2\x2\x2\xB4\xB5\a~\x2\x2\xB5\xB6\a~\x2\x2\xB6<");
		sb.Append("\x3\x2\x2\x2\xB7\xB8\a\x64\x2\x2\xB8\xB9\aq\x2\x2\xB9\xBA\a");
		sb.Append("q\x2\x2\xBA\xBB\an\x2\x2\xBB\xBC\ag\x2\x2\xBC\xBD\a\x63\x2\x2");
		sb.Append("\xBD\xC8\ap\x2\x2\xBE\xBF\ak\x2\x2\xBF\xC0\ap\x2\x2\xC0\xC8");
		sb.Append("\av\x2\x2\xC1\xC2\au\x2\x2\xC2\xC3\av\x2\x2\xC3\xC4\at\x2\x2");
		sb.Append("\xC4\xC5\ak\x2\x2\xC5\xC6\ap\x2\x2\xC6\xC8\ai\x2\x2\xC7\xB7");
		sb.Append("\x3\x2\x2\x2\xC7\xBE\x3\x2\x2\x2\xC7\xC1\x3\x2\x2\x2\xC8>\x3");
		sb.Append("\x2\x2\x2\xC9\xCD\t\x5\x2\x2\xCA\xCC\t\x6\x2\x2\xCB\xCA\x3\x2");
		sb.Append("\x2\x2\xCC\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2");
		sb.Append("\x2\x2\xCE@\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\v\x2\x44N\\\x65");
		sb.Append("sy\xC7\xCD\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
