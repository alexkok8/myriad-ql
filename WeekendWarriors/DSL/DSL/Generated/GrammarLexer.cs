//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\SoftwareConstruction\myriad-ql\WeekendWarriors\DSL\DSL\\Grammar\Grammar.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Whitespace=1, Comment=2, SingleComment=3, StringLiteral=4, BooleanLiteral=5, 
		NumberLiteral=6, LeftParenthesis=7, RightParenthesis=8, LeftBracket=9, 
		RightBracket=10, TypeDeclarator=11, IfStatement=12, FormStatement=13, 
		AssignmentOperator=14, Type=15, Identifier=16;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Whitespace", "Comment", "SingleComment", "StringLiteral", "BooleanLiteral", 
		"NumberLiteral", "LeftParenthesis", "RightParenthesis", "LeftBracket", 
		"RightBracket", "TypeDeclarator", "IfStatement", "FormStatement", "AssignmentOperator", 
		"Type", "Identifier"
	};


	public GrammarLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'('", "')'", "'{'", "'}'", 
		"':'", "'if'", "'form'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "Comment", "SingleComment", "StringLiteral", "BooleanLiteral", 
		"NumberLiteral", "LeftParenthesis", "RightParenthesis", "LeftBracket", 
		"RightBracket", "TypeDeclarator", "IfStatement", "FormStatement", "AssignmentOperator", 
		"Type", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x12");
		sb.Append("\x8A\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x3");
		sb.Append("\x2\x6\x2%\n\x2\r\x2\xE\x2&\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\a\x3/\n\x3\f\x3\xE\x3\x32\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4=\n\x4\f\x4\xE\x4@\v\x4\x3\x4");
		sb.Append("\x3\x4\x3\x5\x3\x5\x6\x5\x46\n\x5\r\x5\xE\x5G\x3\x5\x3\x5\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6U\n");
		sb.Append("\x6\x3\a\x3\a\a\aY\n\a\f\a\xE\a\\\v\a\x3\b\x3\b\x3\t\x3\t\x3");
		sb.Append("\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10");
		sb.Append("\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x3\x10\x5\x10\x82\n\x10\x3\x11\x3\x11\a\x11\x86");
		sb.Append("\n\x11\f\x11\xE\x11\x89\v\x11\x3\x30\x2\x12\x3\x3\x5\x4\a\x5");
		sb.Append("\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D");
		sb.Append("\x10\x1F\x11!\x12\x3\x2\a\x5\x2\v\f\xE\xF\"\"\x4\x2\f\f\xF\xF");
		sb.Append("\x3\x2$$\x6\x2&&\x43\\\x61\x61\x63|\a\x2&&\x32;\x43\\\x61\x61");
		sb.Append("\x63|\x92\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2");
		sb.Append("\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF");
		sb.Append("\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3");
		sb.Append("\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2");
		sb.Append("\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2");
		sb.Append("\x3$\x3\x2\x2\x2\x5*\x3\x2\x2\x2\a\x38\x3\x2\x2\x2\t\x43\x3");
		sb.Append("\x2\x2\x2\vT\x3\x2\x2\x2\rV\x3\x2\x2\x2\xF]\x3\x2\x2\x2\x11");
		sb.Append("_\x3\x2\x2\x2\x13\x61\x3\x2\x2\x2\x15\x63\x3\x2\x2\x2\x17\x65");
		sb.Append("\x3\x2\x2\x2\x19g\x3\x2\x2\x2\x1Bj\x3\x2\x2\x2\x1Do\x3\x2\x2");
		sb.Append("\x2\x1F\x81\x3\x2\x2\x2!\x83\x3\x2\x2\x2#%\t\x2\x2\x2$#\x3\x2");
		sb.Append("\x2\x2%&\x3\x2\x2\x2&$\x3\x2\x2\x2&\'\x3\x2\x2\x2\'(\x3\x2\x2");
		sb.Append("\x2()\b\x2\x2\x2)\x4\x3\x2\x2\x2*+\a\x31\x2\x2+,\a,\x2\x2,\x30");
		sb.Append("\x3\x2\x2\x2-/\v\x2\x2\x2.-\x3\x2\x2\x2/\x32\x3\x2\x2\x2\x30");
		sb.Append("\x31\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x31\x33\x3\x2\x2\x2\x32\x30");
		sb.Append("\x3\x2\x2\x2\x33\x34\a,\x2\x2\x34\x35\a\x31\x2\x2\x35\x36\x3");
		sb.Append("\x2\x2\x2\x36\x37\b\x3\x3\x2\x37\x6\x3\x2\x2\x2\x38\x39\a\x31");
		sb.Append("\x2\x2\x39:\a\x31\x2\x2:>\x3\x2\x2\x2;=\n\x3\x2\x2<;\x3\x2\x2");
		sb.Append("\x2=@\x3\x2\x2\x2><\x3\x2\x2\x2>?\x3\x2\x2\x2?\x41\x3\x2\x2");
		sb.Append("\x2@>\x3\x2\x2\x2\x41\x42\b\x4\x3\x2\x42\b\x3\x2\x2\x2\x43\x45");
		sb.Append("\a$\x2\x2\x44\x46\n\x4\x2\x2\x45\x44\x3\x2\x2\x2\x46G\x3\x2");
		sb.Append("\x2\x2G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2HI\x3\x2\x2\x2IJ\a$\x2");
		sb.Append("\x2J\n\x3\x2\x2\x2KL\av\x2\x2LM\at\x2\x2MN\aw\x2\x2NU\ag\x2");
		sb.Append("\x2OP\ah\x2\x2PQ\a\x63\x2\x2QR\an\x2\x2RS\au\x2\x2SU\ag\x2\x2");
		sb.Append("TK\x3\x2\x2\x2TO\x3\x2\x2\x2U\f\x3\x2\x2\x2VZ\x4\x33;\x2WY\x4");
		sb.Append("\x32;\x2XW\x3\x2\x2\x2Y\\\x3\x2\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2");
		sb.Append("\x2\x2[\xE\x3\x2\x2\x2\\Z\x3\x2\x2\x2]^\a*\x2\x2^\x10\x3\x2");
		sb.Append("\x2\x2_`\a+\x2\x2`\x12\x3\x2\x2\x2\x61\x62\a}\x2\x2\x62\x14");
		sb.Append("\x3\x2\x2\x2\x63\x64\a\x7F\x2\x2\x64\x16\x3\x2\x2\x2\x65\x66");
		sb.Append("\a<\x2\x2\x66\x18\x3\x2\x2\x2gh\ak\x2\x2hi\ah\x2\x2i\x1A\x3");
		sb.Append("\x2\x2\x2jk\ah\x2\x2kl\aq\x2\x2lm\at\x2\x2mn\ao\x2\x2n\x1C\x3");
		sb.Append("\x2\x2\x2op\a?\x2\x2p\x1E\x3\x2\x2\x2qr\a\x64\x2\x2rs\aq\x2");
		sb.Append("\x2st\aq\x2\x2tu\an\x2\x2uv\ag\x2\x2vw\a\x63\x2\x2w\x82\ap\x2");
		sb.Append("\x2xy\ak\x2\x2yz\ap\x2\x2z\x82\av\x2\x2{|\au\x2\x2|}\av\x2\x2");
		sb.Append("}~\at\x2\x2~\x7F\ak\x2\x2\x7F\x80\ap\x2\x2\x80\x82\ai\x2\x2");
		sb.Append("\x81q\x3\x2\x2\x2\x81x\x3\x2\x2\x2\x81{\x3\x2\x2\x2\x82 \x3");
		sb.Append("\x2\x2\x2\x83\x87\t\x5\x2\x2\x84\x86\t\x6\x2\x2\x85\x84\x3\x2");
		sb.Append("\x2\x2\x86\x89\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2");
		sb.Append("\x2\x2\x88\"\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\v\x2&\x30>GTZ\x81");
		sb.Append("\x87\x4\x2\x3\x2\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
