//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\SoftwareConstruction\myriad-ql\WeekendWarriors\DSL\DSL\\Grammar\Grammar.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, Whitespace=14, MultiLineComment=15, 
		SingleLineComment=16, StringLiteral=17, BooleanLiteral=18, NumberLiteral=19, 
		LeftParenthesis=20, RightParenthesis=21, LeftBracket=22, RightBracket=23, 
		TypeDeclarator=24, IfStatement=25, ElseStatement=26, FormStatement=27, 
		AssignmentOperator=28, Type=29, Identifier=30;
	public const int
		RULE_form = 0, RULE_statement = 1, RULE_question = 2, RULE_conditionalBlock = 3, 
		RULE_expression = 4;
	public static readonly string[] ruleNames = {
		"form", "statement", "question", "conditionalBlock", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'/'", "'*'", "'+'", "'-'", "'<'", "'<='", "'>'", "'>='", 
		"'!='", "'=='", "'&&'", "'||'", null, null, null, null, null, null, "'('", 
		"')'", "'{'", "'}'", "':'", "'if'", "'else'", "'form'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Whitespace", "MultiLineComment", "SingleLineComment", "StringLiteral", 
		"BooleanLiteral", "NumberLiteral", "LeftParenthesis", "RightParenthesis", 
		"LeftBracket", "RightBracket", "TypeDeclarator", "IfStatement", "ElseStatement", 
		"FormStatement", "AssignmentOperator", "Type", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public GrammarParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FormContext : ParserRuleContext {
		public ITerminalNode FormStatement() { return GetToken(GrammarParser.FormStatement, 0); }
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitForm(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 0, RULE_form);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; Match(FormStatement);
			State = 11; Match(Identifier);
			State = 12; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode LeftBracket() { return GetToken(GrammarParser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(GrammarParser.RightBracket, 0); }
		public QuestionContext[] question() {
			return GetRuleContexts<QuestionContext>();
		}
		public QuestionContext question(int i) {
			return GetRuleContext<QuestionContext>(i);
		}
		public ConditionalBlockContext[] conditionalBlock() {
			return GetRuleContexts<ConditionalBlockContext>();
		}
		public ConditionalBlockContext conditionalBlock(int i) {
			return GetRuleContext<ConditionalBlockContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(LeftBracket);
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==StringLiteral || _la==IfStatement) {
				{
				State = 17;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringLiteral:
					{
					State = 15; question();
					}
					break;
				case IfStatement:
					{
					State = 16; conditionalBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 22; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(GrammarParser.StringLiteral, 0); }
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ITerminalNode TypeDeclarator() { return GetToken(GrammarParser.TypeDeclarator, 0); }
		public ITerminalNode Type() { return GetToken(GrammarParser.Type, 0); }
		public ITerminalNode AssignmentOperator() { return GetToken(GrammarParser.AssignmentOperator, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(GrammarParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(GrammarParser.RightParenthesis, 0); }
		public QuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_question; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterQuestion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitQuestion(this);
		}
	}

	[RuleVersion(0)]
	public QuestionContext question() {
		QuestionContext _localctx = new QuestionContext(Context, State);
		EnterRule(_localctx, 4, RULE_question);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(StringLiteral);
			State = 25; Match(Identifier);
			State = 26; Match(TypeDeclarator);
			State = 27; Match(Type);
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AssignmentOperator:
				{
				State = 28; Match(AssignmentOperator);
				State = 29; Match(LeftParenthesis);
				State = 30; expression(0);
				State = 31; Match(RightParenthesis);
				}
				break;
			case StringLiteral:
			case RightBracket:
			case IfStatement:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalBlockContext : ParserRuleContext {
		public ITerminalNode IfStatement() { return GetToken(GrammarParser.IfStatement, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(GrammarParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(GrammarParser.RightParenthesis, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ElseStatement() { return GetToken(GrammarParser.ElseStatement, 0); }
		public ConditionalBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterConditionalBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitConditionalBlock(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalBlockContext conditionalBlock() {
		ConditionalBlockContext _localctx = new ConditionalBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_conditionalBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(IfStatement);
			State = 37; Match(LeftParenthesis);
			State = 38; expression(0);
			State = 39; Match(RightParenthesis);
			State = 40; statement();
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ElseStatement:
				{
				State = 41; Match(ElseStatement);
				State = 42; statement();
				}
				break;
			case StringLiteral:
			case RightBracket:
			case IfStatement:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(GrammarParser.StringLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(GrammarParser.BooleanLiteral, 0); }
		public ITerminalNode NumberLiteral() { return GetToken(GrammarParser.NumberLiteral, 0); }
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(GrammarParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(GrammarParser.RightParenthesis, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
			case BooleanLiteral:
			case NumberLiteral:
			case Identifier:
				{
				State = 47;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << BooleanLiteral) | (1L << NumberLiteral) | (1L << Identifier))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LeftParenthesis:
				{
				{
				State = 48; Match(LeftParenthesis);
				State = 49; expression(0);
				State = 50; Match(RightParenthesis);
				}
				}
				break;
			case T__0:
				{
				{
				State = 52; Match(T__0);
				State = 53; expression(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 74;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 56;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 57;
						_la = TokenStream.LA(1);
						if ( !(_la==T__1 || _la==T__2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 58; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 59;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 60;
						_la = TokenStream.LA(1);
						if ( !(_la==T__3 || _la==T__4) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 61; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 62;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 63;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 64; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 65;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 66;
						_la = TokenStream.LA(1);
						if ( !(_la==T__9 || _la==T__10) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 67; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 68;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						{
						State = 69; Match(T__11);
						}
						State = 70; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 71;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						{
						State = 72; Match(T__12);
						}
						State = 73; expression(2);
						}
						break;
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3 R\x4");
		sb.Append("\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3\x14\n\x3\f\x3\xE\x3\x17");
		sb.Append("\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x5\x4%\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x5\x5/\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x5\x6\x39\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\a\x6M\n\x6\f\x6\xE\x6P\v\x6\x3\x6\x2\x3");
		sb.Append("\n\a\x2\x4\x6\b\n\x2\a\x4\x2\x13\x15  \x3\x2\x4\x5\x3\x2\x6");
		sb.Append("\a\x3\x2\b\v\x3\x2\f\rX\x2\f\x3\x2\x2\x2\x4\x10\x3\x2\x2\x2");
		sb.Append("\x6\x1A\x3\x2\x2\x2\b&\x3\x2\x2\x2\n\x38\x3\x2\x2\x2\f\r\a\x1D");
		sb.Append("\x2\x2\r\xE\a \x2\x2\xE\xF\x5\x4\x3\x2\xF\x3\x3\x2\x2\x2\x10");
		sb.Append("\x15\a\x18\x2\x2\x11\x14\x5\x6\x4\x2\x12\x14\x5\b\x5\x2\x13");
		sb.Append("\x11\x3\x2\x2\x2\x13\x12\x3\x2\x2\x2\x14\x17\x3\x2\x2\x2\x15");
		sb.Append("\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x18\x3\x2\x2\x2\x17");
		sb.Append("\x15\x3\x2\x2\x2\x18\x19\a\x19\x2\x2\x19\x5\x3\x2\x2\x2\x1A");
		sb.Append("\x1B\a\x13\x2\x2\x1B\x1C\a \x2\x2\x1C\x1D\a\x1A\x2\x2\x1D$\a");
		sb.Append("\x1F\x2\x2\x1E\x1F\a\x1E\x2\x2\x1F \a\x16\x2\x2 !\x5\n\x6\x2");
		sb.Append("!\"\a\x17\x2\x2\"%\x3\x2\x2\x2#%\x3\x2\x2\x2$\x1E\x3\x2\x2\x2");
		sb.Append("$#\x3\x2\x2\x2%\a\x3\x2\x2\x2&\'\a\x1B\x2\x2\'(\a\x16\x2\x2");
		sb.Append("()\x5\n\x6\x2)*\a\x17\x2\x2*.\x5\x4\x3\x2+,\a\x1C\x2\x2,/\x5");
		sb.Append("\x4\x3\x2-/\x3\x2\x2\x2.+\x3\x2\x2\x2.-\x3\x2\x2\x2/\t\x3\x2");
		sb.Append("\x2\x2\x30\x31\b\x6\x1\x2\x31\x39\t\x2\x2\x2\x32\x33\a\x16\x2");
		sb.Append("\x2\x33\x34\x5\n\x6\x2\x34\x35\a\x17\x2\x2\x35\x39\x3\x2\x2");
		sb.Append("\x2\x36\x37\a\x3\x2\x2\x37\x39\x5\n\x6\x2\x38\x30\x3\x2\x2\x2");
		sb.Append("\x38\x32\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x39N\x3\x2\x2\x2:;");
		sb.Append("\f\b\x2\x2;<\t\x3\x2\x2<M\x5\n\x6\t=>\f\a\x2\x2>?\t\x4\x2\x2");
		sb.Append("?M\x5\n\x6\b@\x41\f\x6\x2\x2\x41\x42\t\x5\x2\x2\x42M\x5\n\x6");
		sb.Append("\a\x43\x44\f\x5\x2\x2\x44\x45\t\x6\x2\x2\x45M\x5\n\x6\x6\x46");
		sb.Append("G\f\x4\x2\x2GH\a\xE\x2\x2HM\x5\n\x6\x5IJ\f\x3\x2\x2JK\a\xF\x2");
		sb.Append("\x2KM\x5\n\x6\x4L:\x3\x2\x2\x2L=\x3\x2\x2\x2L@\x3\x2\x2\x2L");
		sb.Append("\x43\x3\x2\x2\x2L\x46\x3\x2\x2\x2LI\x3\x2\x2\x2MP\x3\x2\x2\x2");
		sb.Append("NL\x3\x2\x2\x2NO\x3\x2\x2\x2O\v\x3\x2\x2\x2PN\x3\x2\x2\x2\t");
		sb.Append("\x13\x15$.\x38LN");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
