//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Boukr\Documents\myriad-ql\WeekendWarriors\DSL\DSL\\Grammar\Grammar.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Whitespace=1, MultiLineComment=2, SingleLineComment=3, StringLiteral=4, 
		BooleanLiteral=5, NumberLiteral=6, LeftParenthesis=7, RightParenthesis=8, 
		LeftBracket=9, RightBracket=10, TypeDeclarator=11, IfStatement=12, ElseStatement=13, 
		FormStatement=14, AssignmentOperator=15, NotOperator=16, MinusOperator=17, 
		DivisionOperator=18, MultiplyOperator=19, AdditionOperator=20, SubtractionOperator=21, 
		LessThanOperator=22, LessThanOrEqualsOperator=23, GreaterThanOperator=24, 
		GreaterThanOrEqualsOperator=25, NotEqualOperator=26, EqualsOperator=27, 
		AndOperator=28, OrOperator=29, Type=30, Identifier=31;
	public const int
		RULE_form = 0, RULE_statement = 1, RULE_question = 2, RULE_conditionalBlock = 3, 
		RULE_expression = 4;
	public static readonly string[] ruleNames = {
		"form", "statement", "question", "conditionalBlock", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'('", "')'", "'{'", "'}'", 
		"':'", "'if'", "'else'", "'form'", "'='", "'!'", null, "'/'", "'*'", "'+'", 
		null, "'<'", "'<='", "'>'", "'>='", "'!='", "'=='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "MultiLineComment", "SingleLineComment", "StringLiteral", 
		"BooleanLiteral", "NumberLiteral", "LeftParenthesis", "RightParenthesis", 
		"LeftBracket", "RightBracket", "TypeDeclarator", "IfStatement", "ElseStatement", 
		"FormStatement", "AssignmentOperator", "NotOperator", "MinusOperator", 
		"DivisionOperator", "MultiplyOperator", "AdditionOperator", "SubtractionOperator", 
		"LessThanOperator", "LessThanOrEqualsOperator", "GreaterThanOperator", 
		"GreaterThanOrEqualsOperator", "NotEqualOperator", "EqualsOperator", "AndOperator", 
		"OrOperator", "Type", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public GrammarParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FormContext : ParserRuleContext {
		public ITerminalNode FormStatement() { return GetToken(GrammarParser.FormStatement, 0); }
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 0, RULE_form);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; Match(FormStatement);
			State = 11; Match(Identifier);
			State = 12; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode LeftBracket() { return GetToken(GrammarParser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(GrammarParser.RightBracket, 0); }
		public QuestionContext[] question() {
			return GetRuleContexts<QuestionContext>();
		}
		public QuestionContext question(int i) {
			return GetRuleContext<QuestionContext>(i);
		}
		public ConditionalBlockContext[] conditionalBlock() {
			return GetRuleContexts<ConditionalBlockContext>();
		}
		public ConditionalBlockContext conditionalBlock(int i) {
			return GetRuleContext<ConditionalBlockContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(LeftBracket);
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==StringLiteral || _la==IfStatement) {
				{
				State = 17;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringLiteral:
					{
					State = 15; question();
					}
					break;
				case IfStatement:
					{
					State = 16; conditionalBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 22; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(GrammarParser.StringLiteral, 0); }
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ITerminalNode TypeDeclarator() { return GetToken(GrammarParser.TypeDeclarator, 0); }
		public ITerminalNode Type() { return GetToken(GrammarParser.Type, 0); }
		public ITerminalNode AssignmentOperator() { return GetToken(GrammarParser.AssignmentOperator, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(GrammarParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(GrammarParser.RightParenthesis, 0); }
		public QuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_question; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterQuestion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitQuestion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionContext question() {
		QuestionContext _localctx = new QuestionContext(Context, State);
		EnterRule(_localctx, 4, RULE_question);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(StringLiteral);
			State = 25; Match(Identifier);
			State = 26; Match(TypeDeclarator);
			State = 27; Match(Type);
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AssignmentOperator:
				{
				State = 28; Match(AssignmentOperator);
				State = 29; Match(LeftParenthesis);
				State = 30; expression(0);
				State = 31; Match(RightParenthesis);
				}
				break;
			case StringLiteral:
			case RightBracket:
			case IfStatement:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalBlockContext : ParserRuleContext {
		public ITerminalNode IfStatement() { return GetToken(GrammarParser.IfStatement, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(GrammarParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(GrammarParser.RightParenthesis, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ElseStatement() { return GetToken(GrammarParser.ElseStatement, 0); }
		public ConditionalBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterConditionalBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitConditionalBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalBlockContext conditionalBlock() {
		ConditionalBlockContext _localctx = new ConditionalBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_conditionalBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(IfStatement);
			State = 37; Match(LeftParenthesis);
			State = 38; expression(0);
			State = 39; Match(RightParenthesis);
			State = 40; statement();
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ElseStatement:
				{
				State = 41; Match(ElseStatement);
				State = 42; statement();
				}
				break;
			case StringLiteral:
			case RightBracket:
			case IfStatement:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OrOperator() { return GetToken(GrammarParser.OrOperator, 0); }
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DivisionOperator() { return GetToken(GrammarParser.DivisionOperator, 0); }
		public ITerminalNode MultiplyOperator() { return GetToken(GrammarParser.MultiplyOperator, 0); }
		public MulDivContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMulDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMulDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AdditionOperator() { return GetToken(GrammarParser.AdditionOperator, 0); }
		public ITerminalNode SubtractionOperator() { return GetToken(GrammarParser.SubtractionOperator, 0); }
		public AddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExpressionContext {
		public ITerminalNode LeftParenthesis() { return GetToken(GrammarParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(GrammarParser.RightParenthesis, 0); }
		public ParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpressionContext {
		public ITerminalNode StringLiteral() { return GetToken(GrammarParser.StringLiteral, 0); }
		public StringContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MINUSContext : ExpressionContext {
		public ITerminalNode SubtractionOperator() { return GetToken(GrammarParser.SubtractionOperator, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MINUSContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMINUS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMINUS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMINUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NOTContext : ExpressionContext {
		public ITerminalNode NotOperator() { return GetToken(GrammarParser.NotOperator, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NOTContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNOT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNOT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNOT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpressionContext {
		public ITerminalNode NumberLiteral() { return GetToken(GrammarParser.NumberLiteral, 0); }
		public NumberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExpressionContext {
		public ITerminalNode BooleanLiteral() { return GetToken(GrammarParser.BooleanLiteral, 0); }
		public BoolContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LessThanOperator() { return GetToken(GrammarParser.LessThanOperator, 0); }
		public ITerminalNode LessThanOrEqualsOperator() { return GetToken(GrammarParser.LessThanOrEqualsOperator, 0); }
		public ITerminalNode GreaterThanOperator() { return GetToken(GrammarParser.GreaterThanOperator, 0); }
		public ITerminalNode GreaterThanOrEqualsOperator() { return GetToken(GrammarParser.GreaterThanOrEqualsOperator, 0); }
		public ComparisonContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AndOperator() { return GetToken(GrammarParser.AndOperator, 0); }
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public IDContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NotEqualOperator() { return GetToken(GrammarParser.NotEqualOperator, 0); }
		public ITerminalNode EqualsOperator() { return GetToken(GrammarParser.EqualsOperator, 0); }
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 47; Match(StringLiteral);
				}
				break;
			case BooleanLiteral:
				{
				_localctx = new BoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 48; Match(BooleanLiteral);
				}
				break;
			case NumberLiteral:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 49; Match(NumberLiteral);
				}
				break;
			case Identifier:
				{
				_localctx = new IDContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 50; Match(Identifier);
				}
				break;
			case LeftParenthesis:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 51; Match(LeftParenthesis);
				State = 52; expression(0);
				State = 53; Match(RightParenthesis);
				}
				break;
			case NotOperator:
				{
				_localctx = new NOTContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 55; Match(NotOperator);
				State = 56; expression(8);
				}
				break;
			case SubtractionOperator:
				{
				_localctx = new MINUSContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57; Match(SubtractionOperator);
				State = 58; expression(7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 81;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 79;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 61;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 62;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DivisionOperator || _la==MultiplyOperator) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 63; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 64;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 65;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AdditionOperator || _la==SubtractionOperator) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 66; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 67;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 68;
						((ComparisonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThanOperator) | (1L << LessThanOrEqualsOperator) | (1L << GreaterThanOperator) | (1L << GreaterThanOrEqualsOperator))) != 0)) ) {
							((ComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 69; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 70;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 71;
						((EqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==NotEqualOperator || _la==EqualsOperator) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 72; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 73;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 74; Match(AndOperator);
						State = 75; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 76;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 77; Match(OrOperator);
						State = 78; expression(2);
						}
						break;
					}
					} 
				}
				State = 83;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3!W\x4");
		sb.Append("\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3\x14\n\x3\f\x3\xE\x3\x17");
		sb.Append("\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x5\x4%\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x5\x5/\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6>\n\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6R\n\x6");
		sb.Append("\f\x6\xE\x6U\v\x6\x3\x6\x2\x3\n\a\x2\x4\x6\b\n\x2\x6\x3\x2\x14");
		sb.Append("\x15\x3\x2\x16\x17\x3\x2\x18\x1B\x3\x2\x1C\x1D\x61\x2\f\x3\x2");
		sb.Append("\x2\x2\x4\x10\x3\x2\x2\x2\x6\x1A\x3\x2\x2\x2\b&\x3\x2\x2\x2");
		sb.Append("\n=\x3\x2\x2\x2\f\r\a\x10\x2\x2\r\xE\a!\x2\x2\xE\xF\x5\x4\x3");
		sb.Append("\x2\xF\x3\x3\x2\x2\x2\x10\x15\a\v\x2\x2\x11\x14\x5\x6\x4\x2");
		sb.Append("\x12\x14\x5\b\x5\x2\x13\x11\x3\x2\x2\x2\x13\x12\x3\x2\x2\x2");
		sb.Append("\x14\x17\x3\x2\x2\x2\x15\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2");
		sb.Append("\x16\x18\x3\x2\x2\x2\x17\x15\x3\x2\x2\x2\x18\x19\a\f\x2\x2\x19");
		sb.Append("\x5\x3\x2\x2\x2\x1A\x1B\a\x6\x2\x2\x1B\x1C\a!\x2\x2\x1C\x1D");
		sb.Append("\a\r\x2\x2\x1D$\a \x2\x2\x1E\x1F\a\x11\x2\x2\x1F \a\t\x2\x2");
		sb.Append(" !\x5\n\x6\x2!\"\a\n\x2\x2\"%\x3\x2\x2\x2#%\x3\x2\x2\x2$\x1E");
		sb.Append("\x3\x2\x2\x2$#\x3\x2\x2\x2%\a\x3\x2\x2\x2&\'\a\xE\x2\x2\'(\a");
		sb.Append("\t\x2\x2()\x5\n\x6\x2)*\a\n\x2\x2*.\x5\x4\x3\x2+,\a\xF\x2\x2");
		sb.Append(",/\x5\x4\x3\x2-/\x3\x2\x2\x2.+\x3\x2\x2\x2.-\x3\x2\x2\x2/\t");
		sb.Append("\x3\x2\x2\x2\x30\x31\b\x6\x1\x2\x31>\a\x6\x2\x2\x32>\a\a\x2");
		sb.Append("\x2\x33>\a\b\x2\x2\x34>\a!\x2\x2\x35\x36\a\t\x2\x2\x36\x37\x5");
		sb.Append("\n\x6\x2\x37\x38\a\n\x2\x2\x38>\x3\x2\x2\x2\x39:\a\x12\x2\x2");
		sb.Append(":>\x5\n\x6\n;<\a\x17\x2\x2<>\x5\n\x6\t=\x30\x3\x2\x2\x2=\x32");
		sb.Append("\x3\x2\x2\x2=\x33\x3\x2\x2\x2=\x34\x3\x2\x2\x2=\x35\x3\x2\x2");
		sb.Append("\x2=\x39\x3\x2\x2\x2=;\x3\x2\x2\x2>S\x3\x2\x2\x2?@\f\b\x2\x2");
		sb.Append("@\x41\t\x2\x2\x2\x41R\x5\n\x6\t\x42\x43\f\a\x2\x2\x43\x44\t");
		sb.Append("\x3\x2\x2\x44R\x5\n\x6\b\x45\x46\f\x6\x2\x2\x46G\t\x4\x2\x2");
		sb.Append("GR\x5\n\x6\aHI\f\x5\x2\x2IJ\t\x5\x2\x2JR\x5\n\x6\x6KL\f\x4\x2");
		sb.Append("\x2LM\a\x1E\x2\x2MR\x5\n\x6\x5NO\f\x3\x2\x2OP\a\x1F\x2\x2PR");
		sb.Append("\x5\n\x6\x4Q?\x3\x2\x2\x2Q\x42\x3\x2\x2\x2Q\x45\x3\x2\x2\x2");
		sb.Append("QH\x3\x2\x2\x2QK\x3\x2\x2\x2QN\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3");
		sb.Append("\x2\x2\x2ST\x3\x2\x2\x2T\v\x3\x2\x2\x2US\x3\x2\x2\x2\t\x13\x15");
		sb.Append("$.=QS");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
