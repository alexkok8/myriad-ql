

grammar QL;

root: 'form' ID block;

block: '{' question* '}';

question : ( ID':' STRING type computed_question* | statement );

type: ( 'boolean' | 'date' | 'decimal' | 'integer' | 'money' | 'string' ) ;

computed_question: '(' type '-' type | type '+' type ')' ;

statement
 : IF parenthesisExpr block (ELSE IF parenthesisExpr block)* (ELSE block)?
 | WHILE parenthesisExpr block
 ;

parenthesisExpr
 : '(' expr ')';

expr returns [Expr result]
 : atom relOp atom
 | atom boolOp atom
 | atom arithOp atom
 | '!' atom
 | '+' atom
 | '-' atom
 | atom
 ;
 
 unExpr returns [Expr result]
    :  '+' x=unExpr { $result = new Pos($x.result); }
    |  '-' x=unExpr { $result = new Neg($x.result); }
    |  '!' x=unExpr { $result = new Not($x.result); }
    |  x=atom    { $result = $x.result; }
    ;

mulExpr returns [Expr result]
    :   lhs=unExpr { $result=$lhs.result; } ( op=( '*' | '/' ) rhs=unExpr
    {
      if ($op.text.equals("*")) {
        $result = new Mul($result, rhs);
      }
      if ($op.text.equals("<=")) {
        $result = new Div($result, rhs);
      }
    })*
    ;
 
addExpr returns [Expr result]
    :   lhs=mulExpr { $result=$lhs.result; } ( op=('+' | '-') rhs=mulExpr
    {
      if ($op.text.equals("+")) {
        $result = new Add($result, rhs);
      }
      if ($op.text.equals("-")) {
        $result = new Sub($result, rhs);
      }
    })*
    ;

relOp
 : '==' | '!=' | '<=' | '>=' | '>' | '<';

boolOp
 : '&&' | '||';

arithOp
 : '+' | '-' | '/' | '*';

atom
 : DECIMAL
 | MONEY
 | INT
 | STRING
 | BOOL
 | DDMMYY
 | ID
 ;

// TODO look up conventions tokens/names capital letters
BOOL: ('true' | 'false');
IF : 'if';
ELSE : 'else';
WHILE : 'while';

ID:  ('a'..'z'|'A'..'Z')('a'..'z'|'A'..'Z'|'0'..'9'|'_')* ;

INT: ('0'..'9')+;

TWO_DIGIT: ('0'..'9')('0'..'9');

DECIMAL : INT '.' INT | '.' INT;
MONEY : INT '.' TWO_DIGIT;

DDMMYY : TWO_DIGIT ('.' | '-' | '/') TWO_DIGIT ('.' | '-' | '/') TWO_DIGIT ; // TODO check valid date

STRING: ('"' .*? '"');

WS : [ \t\r\n]+ -> skip ; // skip spaces, tabs, newlines

// http://stackoverflow.com/questions/14778570/antlr-4-channel-hidden-and-options
COMMENT 
    :   ( '//' ~[\r\n]* '\r'? '\n'
        | '/*' .*? '*/'
        ) -> skip
    ;